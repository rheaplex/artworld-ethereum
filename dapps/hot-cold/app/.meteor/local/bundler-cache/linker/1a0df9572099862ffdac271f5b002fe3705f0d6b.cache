[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar ReactiveDict = Package['reactive-dict'].ReactiveDict;\nvar EJSON = Package.ejson.EJSON;\n\n/* Package-scope variables */\nvar Session;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////\n//                                                                             //\n// packages/session/session.js                                                 //\n//                                                                             //\n/////////////////////////////////////////////////////////////////////////////////\n                                                                               //\nSession = new ReactiveDict('session');                                         // 1\n                                                                               // 2\n// Documentation here is really awkward because the methods are defined        // 3\n// elsewhere                                                                   // 4\n                                                                               // 5\n/**                                                                            // 6\n * @memberOf Session                                                           // 7\n * @method set                                                                 // 8\n * @summary Set a variable in the session. Notify any listeners that the value\n * has changed (eg: redraw templates, and rerun any                            // 10\n * [`Tracker.autorun`](#tracker_autorun) computations, that called             // 11\n * [`Session.get`](#session_get) on this `key`.)                               // 12\n * @locus Client                                                               // 13\n * @param {String} key The key to set, eg, `selectedItem`                      // 14\n * @param {EJSONable | undefined} value The new value for `key`                // 15\n */                                                                            // 16\n                                                                               // 17\n/**                                                                            // 18\n * @memberOf Session                                                           // 19\n * @method setDefault                                                          // 20\n * @summary Set a variable in the session if it hasn't been set before.        // 21\n * Otherwise works exactly the same as [`Session.set`](#session_set).          // 22\n * @locus Client                                                               // 23\n * @param {String} key The key to set, eg, `selectedItem`                      // 24\n * @param {EJSONable | undefined} value The new value for `key`                // 25\n */                                                                            // 26\n                                                                               // 27\n/**                                                                            // 28\n * @memberOf Session                                                           // 29\n * @method get                                                                 // 30\n * @summary Get the value of a session variable. If inside a [reactive         // 31\n * computation](#reactivity), invalidate the computation the next time the     // 32\n * value of the variable is changed by [`Session.set`](#session_set). This     // 33\n * returns a clone of the session value, so if it's an object or an array,     // 34\n * mutating the returned value has no effect on the value stored in the        // 35\n * session.                                                                    // 36\n * @locus Client                                                               // 37\n * @param {String} key The name of the session variable to return              // 38\n */                                                                            // 39\n                                                                               // 40\n/**                                                                            // 41\n * @memberOf Session                                                           // 42\n * @method equals                                                              // 43\n * @summary Test if a session variable is equal to a value. If inside a        // 44\n * [reactive computation](#reactivity), invalidate the computation the next    // 45\n * time the variable changes to or from the value.                             // 46\n * @locus Client                                                               // 47\n * @param {String} key The name of the session variable to test                // 48\n * @param {String | Number | Boolean | null | undefined} value The value to    // 49\n * test against                                                                // 50\n */                                                                            // 51\n                                                                               // 52\n/////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage.session = {\n  Session: Session\n};\n\n})();\n","servePath":"/packages/session.js","sourceMap":{"version":3,"sources":["/packages/session/session.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oF","file":"/packages/session.js","sourcesContent":["Session = new ReactiveDict('session');\n\n// Documentation here is really awkward because the methods are defined\n// elsewhere\n\n/**\n * @memberOf Session\n * @method set\n * @summary Set a variable in the session. Notify any listeners that the value\n * has changed (eg: redraw templates, and rerun any\n * [`Tracker.autorun`](#tracker_autorun) computations, that called\n * [`Session.get`](#session_get) on this `key`.)\n * @locus Client\n * @param {String} key The key to set, eg, `selectedItem`\n * @param {EJSONable | undefined} value The new value for `key`\n */\n\n/**\n * @memberOf Session\n * @method setDefault\n * @summary Set a variable in the session if it hasn't been set before.\n * Otherwise works exactly the same as [`Session.set`](#session_set).\n * @locus Client\n * @param {String} key The key to set, eg, `selectedItem`\n * @param {EJSONable | undefined} value The new value for `key`\n */\n\n/**\n * @memberOf Session\n * @method get\n * @summary Get the value of a session variable. If inside a [reactive\n * computation](#reactivity), invalidate the computation the next time the\n * value of the variable is changed by [`Session.set`](#session_set). This\n * returns a clone of the session value, so if it's an object or an array,\n * mutating the returned value has no effect on the value stored in the\n * session.\n * @locus Client\n * @param {String} key The name of the session variable to return\n */\n\n/**\n * @memberOf Session\n * @method equals\n * @summary Test if a session variable is equal to a value. If inside a\n * [reactive computation](#reactivity), invalidate the computation the next\n * time the variable changes to or from the value.\n * @locus Client\n * @param {String} key The name of the session variable to test\n * @param {String | Number | Boolean | null | undefined} value The value to\n * test against\n */\n"]}}]
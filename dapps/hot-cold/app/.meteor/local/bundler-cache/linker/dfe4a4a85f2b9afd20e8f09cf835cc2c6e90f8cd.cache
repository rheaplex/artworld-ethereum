[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar EJSON = Package.ejson.EJSON;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar babelHelpers = Package['babel-runtime'].babelHelpers;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar ReactiveDict;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/reactive-dict/reactive-dict.js                                                                        //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\n// XXX come up with a serialization method which canonicalizes object key                                         //\n// order, which would allow us to use objects as values for equals.                                               //\nvar stringify = function (value) {                                                                                // 3\n  if (value === undefined) return 'undefined';                                                                    // 4\n  return EJSON.stringify(value);                                                                                  // 6\n};                                                                                                                //\nvar parse = function (serialized) {                                                                               // 8\n  if (serialized === undefined || serialized === 'undefined') return undefined;                                   // 9\n  return EJSON.parse(serialized);                                                                                 // 11\n};                                                                                                                //\n                                                                                                                  //\nvar changed = function (v) {                                                                                      // 14\n  v && v.changed();                                                                                               // 15\n};                                                                                                                //\n                                                                                                                  //\n// XXX COMPAT WITH 0.9.1 : accept migrationData instead of dictName                                               //\nReactiveDict = function (dictName) {                                                                              // 19\n  // this.keys: key -> value                                                                                      //\n  if (dictName) {                                                                                                 // 21\n    if (typeof dictName === 'string') {                                                                           // 22\n      // the normal case, argument is a string name.                                                              //\n      // _registerDictForMigrate will throw an error on duplicate name.                                           //\n      ReactiveDict._registerDictForMigrate(dictName, this);                                                       // 25\n      this.keys = ReactiveDict._loadMigratedDict(dictName) || {};                                                 // 26\n      this.name = dictName;                                                                                       // 27\n    } else if (typeof dictName === 'object') {                                                                    //\n      // back-compat case: dictName is actually migrationData                                                     //\n      this.keys = dictName;                                                                                       // 30\n    } else {                                                                                                      //\n      throw new Error(\"Invalid ReactiveDict argument: \" + dictName);                                              // 32\n    }                                                                                                             //\n  } else {                                                                                                        //\n    // no name given; no migration will be performed                                                              //\n    this.keys = {};                                                                                               // 36\n  }                                                                                                               //\n                                                                                                                  //\n  this.allDeps = new Tracker.Dependency();                                                                        // 39\n  this.keyDeps = {}; // key -> Dependency                                                                         // 40\n  this.keyValueDeps = {}; // key -> Dependency                                                                    // 41\n};                                                                                                                //\n                                                                                                                  //\n_.extend(ReactiveDict.prototype, {                                                                                // 44\n  // set() began as a key/value method, but we are now overloading it                                             //\n  // to take an object of key/value pairs, similar to backbone                                                    //\n  // http://backbonejs.org/#Model-set                                                                             //\n                                                                                                                  //\n  set: function (keyOrObject, value) {                                                                            // 49\n    var self = this;                                                                                              // 50\n                                                                                                                  //\n    if (typeof keyOrObject === 'object' && value === undefined) {                                                 // 52\n      // Called as `dict.set({...})`                                                                              //\n      self._setObject(keyOrObject);                                                                               // 54\n      return;                                                                                                     // 55\n    }                                                                                                             //\n    // the input isn't an object, so it must be a key                                                             //\n    // and we resume with the rest of the function                                                                //\n    var key = keyOrObject;                                                                                        // 59\n                                                                                                                  //\n    value = stringify(value);                                                                                     // 61\n                                                                                                                  //\n    var keyExisted = _.has(self.keys, key);                                                                       // 63\n    var oldSerializedValue = keyExisted ? self.keys[key] : 'undefined';                                           // 64\n    var isNewValue = value !== oldSerializedValue;                                                                // 65\n                                                                                                                  //\n    self.keys[key] = value;                                                                                       // 67\n                                                                                                                  //\n    if (isNewValue || !keyExisted) {                                                                              // 69\n      self.allDeps.changed();                                                                                     // 70\n    }                                                                                                             //\n                                                                                                                  //\n    if (isNewValue) {                                                                                             // 73\n      changed(self.keyDeps[key]);                                                                                 // 74\n      if (self.keyValueDeps[key]) {                                                                               // 75\n        changed(self.keyValueDeps[key][oldSerializedValue]);                                                      // 76\n        changed(self.keyValueDeps[key][value]);                                                                   // 77\n      }                                                                                                           //\n    }                                                                                                             //\n  },                                                                                                              //\n                                                                                                                  //\n  setDefault: function (key, value) {                                                                             // 82\n    var self = this;                                                                                              // 83\n    if (!_.has(self.keys, key)) {                                                                                 // 84\n      self.set(key, value);                                                                                       // 85\n    }                                                                                                             //\n  },                                                                                                              //\n                                                                                                                  //\n  get: function (key) {                                                                                           // 89\n    var self = this;                                                                                              // 90\n    self._ensureKey(key);                                                                                         // 91\n    self.keyDeps[key].depend();                                                                                   // 92\n    return parse(self.keys[key]);                                                                                 // 93\n  },                                                                                                              //\n                                                                                                                  //\n  equals: function (key, value) {                                                                                 // 96\n    var self = this;                                                                                              // 97\n                                                                                                                  //\n    // Mongo.ObjectID is in the 'mongo' package                                                                   //\n    var ObjectID = null;                                                                                          // 100\n    if (Package.mongo) {                                                                                          // 101\n      ObjectID = Package.mongo.Mongo.ObjectID;                                                                    // 102\n    }                                                                                                             //\n                                                                                                                  //\n    // We don't allow objects (or arrays that might include objects) for                                          //\n    // .equals, because JSON.stringify doesn't canonicalize object key                                            //\n    // order. (We can make equals have the right return value by parsing the                                      //\n    // current value and using EJSON.equals, but we won't have a canonical                                        //\n    // element of keyValueDeps[key] to store the dependency.) You can still use                                   //\n    // \"EJSON.equals(reactiveDict.get(key), value)\".                                                              //\n    //                                                                                                            //\n    // XXX we could allow arrays as long as we recursively check that there                                       //\n    // are no objects                                                                                             //\n    if (typeof value !== 'string' && typeof value !== 'number' && typeof value !== 'boolean' && typeof value !== 'undefined' && !(value instanceof Date) && !(ObjectID && value instanceof ObjectID) && value !== null) {\n      throw new Error(\"ReactiveDict.equals: value must be scalar\");                                               // 121\n    }                                                                                                             //\n    var serializedValue = stringify(value);                                                                       // 123\n                                                                                                                  //\n    if (Tracker.active) {                                                                                         // 125\n      self._ensureKey(key);                                                                                       // 126\n                                                                                                                  //\n      if (!_.has(self.keyValueDeps[key], serializedValue)) self.keyValueDeps[key][serializedValue] = new Tracker.Dependency();\n                                                                                                                  //\n      var isNew = self.keyValueDeps[key][serializedValue].depend();                                               // 131\n      if (isNew) {                                                                                                // 132\n        Tracker.onInvalidate(function () {                                                                        // 133\n          // clean up [key][serializedValue] if it's now empty, so we don't                                       //\n          // use O(n) memory for n = values seen ever                                                             //\n          if (!self.keyValueDeps[key][serializedValue].hasDependents()) delete self.keyValueDeps[key][serializedValue];\n        });                                                                                                       //\n      }                                                                                                           //\n    }                                                                                                             //\n                                                                                                                  //\n    var oldValue = undefined;                                                                                     // 142\n    if (_.has(self.keys, key)) oldValue = parse(self.keys[key]);                                                  // 143\n    return EJSON.equals(oldValue, value);                                                                         // 144\n  },                                                                                                              //\n                                                                                                                  //\n  all: function () {                                                                                              // 147\n    this.allDeps.depend();                                                                                        // 148\n    var ret = {};                                                                                                 // 149\n    _.each(this.keys, function (value, key) {                                                                     // 150\n      ret[key] = parse(value);                                                                                    // 151\n    });                                                                                                           //\n    return ret;                                                                                                   // 153\n  },                                                                                                              //\n                                                                                                                  //\n  clear: function () {                                                                                            // 156\n    var self = this;                                                                                              // 157\n                                                                                                                  //\n    var oldKeys = self.keys;                                                                                      // 159\n    self.keys = {};                                                                                               // 160\n                                                                                                                  //\n    self.allDeps.changed();                                                                                       // 162\n                                                                                                                  //\n    _.each(oldKeys, function (value, key) {                                                                       // 164\n      changed(self.keyDeps[key]);                                                                                 // 165\n      changed(self.keyValueDeps[key][value]);                                                                     // 166\n      changed(self.keyValueDeps[key]['undefined']);                                                               // 167\n    });                                                                                                           //\n  },                                                                                                              //\n                                                                                                                  //\n  'delete': function (key) {                                                                                      // 172\n    var self = this;                                                                                              // 173\n    var didRemove = false;                                                                                        // 174\n                                                                                                                  //\n    if (_.has(self.keys, key)) {                                                                                  // 176\n      var oldValue = self.keys[key];                                                                              // 177\n      delete self.keys[key];                                                                                      // 178\n      changed(self.keyDeps[key]);                                                                                 // 179\n      if (self.keyValueDeps[key]) {                                                                               // 180\n        changed(self.keyValueDeps[key][oldValue]);                                                                // 181\n        changed(self.keyValueDeps[key]['undefined']);                                                             // 182\n      }                                                                                                           //\n      self.allDeps.changed();                                                                                     // 184\n      didRemove = true;                                                                                           // 185\n    }                                                                                                             //\n                                                                                                                  //\n    return didRemove;                                                                                             // 188\n  },                                                                                                              //\n                                                                                                                  //\n  _setObject: function (object) {                                                                                 // 191\n    var self = this;                                                                                              // 192\n                                                                                                                  //\n    _.each(object, function (value, key) {                                                                        // 194\n      self.set(key, value);                                                                                       // 195\n    });                                                                                                           //\n  },                                                                                                              //\n                                                                                                                  //\n  _ensureKey: function (key) {                                                                                    // 199\n    var self = this;                                                                                              // 200\n    if (!(key in self.keyDeps)) {                                                                                 // 201\n      self.keyDeps[key] = new Tracker.Dependency();                                                               // 202\n      self.keyValueDeps[key] = {};                                                                                // 203\n    }                                                                                                             //\n  },                                                                                                              //\n                                                                                                                  //\n  // Get a JSON value that can be passed to the constructor to                                                    //\n  // create a new ReactiveDict with the same contents as this one                                                 //\n  _getMigrationData: function () {                                                                                // 209\n    // XXX sanitize and make sure it's JSONible?                                                                  //\n    return this.keys;                                                                                             // 211\n  }                                                                                                               //\n});                                                                                                               //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/reactive-dict/migration.js                                                                            //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nReactiveDict._migratedDictData = {}; // name -> data                                                              // 1\nReactiveDict._dictsToMigrate = {}; // name -> ReactiveDict                                                        // 2\n                                                                                                                  //\nReactiveDict._loadMigratedDict = function (dictName) {                                                            // 4\n  if (_.has(ReactiveDict._migratedDictData, dictName)) return ReactiveDict._migratedDictData[dictName];           // 5\n                                                                                                                  //\n  return null;                                                                                                    // 8\n};                                                                                                                //\n                                                                                                                  //\nReactiveDict._registerDictForMigrate = function (dictName, dict) {                                                // 11\n  if (_.has(ReactiveDict._dictsToMigrate, dictName)) throw new Error(\"Duplicate ReactiveDict name: \" + dictName);\n                                                                                                                  //\n  ReactiveDict._dictsToMigrate[dictName] = dict;                                                                  // 15\n};                                                                                                                //\n                                                                                                                  //\nif (Meteor.isClient && Package.reload) {                                                                          // 18\n  // Put old migrated data into ReactiveDict._migratedDictData,                                                   //\n  // where it can be accessed by ReactiveDict._loadMigratedDict.                                                  //\n  var migrationData = Package.reload.Reload._migrationData('reactive-dict');                                      // 21\n  if (migrationData && migrationData.dicts) ReactiveDict._migratedDictData = migrationData.dicts;                 // 22\n                                                                                                                  //\n  // On migration, assemble the data from all the dicts that have been                                            //\n  // registered.                                                                                                  //\n  Package.reload.Reload._onMigrate('reactive-dict', function () {                                                 // 27\n    var dictsToMigrate = ReactiveDict._dictsToMigrate;                                                            // 28\n    var dataToMigrate = {};                                                                                       // 29\n                                                                                                                  //\n    for (var dictName in babelHelpers.sanitizeForInObject(dictsToMigrate)) dataToMigrate[dictName] = dictsToMigrate[dictName]._getMigrationData();\n                                                                                                                  //\n    return [true, { dicts: dataToMigrate }];                                                                      // 34\n  });                                                                                                             //\n}                                                                                                                 //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['reactive-dict'] = {\n  ReactiveDict: ReactiveDict\n};\n\n})();\n","servePath":"/packages/reactive-dict.js","sourceMap":{"version":3,"sources":["/reactive-dict.js","/migration.js"],"names":[],"mappings":"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","file":"/packages/reactive-dict.js","sourcesContent":["// XXX come up with a serialization method which canonicalizes object key\n// order, which would allow us to use objects as values for equals.\nvar stringify = function (value) {\n  if (value === undefined)\n    return 'undefined';\n  return EJSON.stringify(value);\n};\nvar parse = function (serialized) {\n  if (serialized === undefined || serialized === 'undefined')\n    return undefined;\n  return EJSON.parse(serialized);\n};\n\nvar changed = function (v) {\n  v && v.changed();\n};\n\n// XXX COMPAT WITH 0.9.1 : accept migrationData instead of dictName\nReactiveDict = function (dictName) {\n  // this.keys: key -> value\n  if (dictName) {\n    if (typeof dictName === 'string') {\n      // the normal case, argument is a string name.\n      // _registerDictForMigrate will throw an error on duplicate name.\n      ReactiveDict._registerDictForMigrate(dictName, this);\n      this.keys = ReactiveDict._loadMigratedDict(dictName) || {};\n      this.name = dictName;\n    } else if (typeof dictName === 'object') {\n      // back-compat case: dictName is actually migrationData\n      this.keys = dictName;\n    } else {\n      throw new Error(\"Invalid ReactiveDict argument: \" + dictName);\n    }\n  } else {\n    // no name given; no migration will be performed\n    this.keys = {};\n  }\n\n  this.allDeps = new Tracker.Dependency;\n  this.keyDeps = {}; // key -> Dependency\n  this.keyValueDeps = {}; // key -> Dependency\n};\n\n_.extend(ReactiveDict.prototype, {\n  // set() began as a key/value method, but we are now overloading it\n  // to take an object of key/value pairs, similar to backbone\n  // http://backbonejs.org/#Model-set\n\n  set: function (keyOrObject, value) {\n    var self = this;\n\n    if ((typeof keyOrObject === 'object') && (value === undefined)) {\n      // Called as `dict.set({...})`\n      self._setObject(keyOrObject);\n      return;\n    }\n    // the input isn't an object, so it must be a key\n    // and we resume with the rest of the function\n    var key = keyOrObject;\n\n    value = stringify(value);\n\n    var keyExisted = _.has(self.keys, key);\n    var oldSerializedValue = keyExisted ? self.keys[key] : 'undefined';\n    var isNewValue = (value !== oldSerializedValue);\n\n    self.keys[key] = value;\n\n    if (isNewValue || !keyExisted) {\n      self.allDeps.changed();\n    }\n\n    if (isNewValue) {\n      changed(self.keyDeps[key]);\n      if (self.keyValueDeps[key]) {\n        changed(self.keyValueDeps[key][oldSerializedValue]);\n        changed(self.keyValueDeps[key][value]);\n      }\n    }\n  },\n\n  setDefault: function (key, value) {\n    var self = this;\n    if (! _.has(self.keys, key)) {\n      self.set(key, value);\n    }\n  },\n\n  get: function (key) {\n    var self = this;\n    self._ensureKey(key);\n    self.keyDeps[key].depend();\n    return parse(self.keys[key]);\n  },\n\n  equals: function (key, value) {\n    var self = this;\n\n    // Mongo.ObjectID is in the 'mongo' package\n    var ObjectID = null;\n    if (Package.mongo) {\n      ObjectID = Package.mongo.Mongo.ObjectID;\n    }\n\n    // We don't allow objects (or arrays that might include objects) for\n    // .equals, because JSON.stringify doesn't canonicalize object key\n    // order. (We can make equals have the right return value by parsing the\n    // current value and using EJSON.equals, but we won't have a canonical\n    // element of keyValueDeps[key] to store the dependency.) You can still use\n    // \"EJSON.equals(reactiveDict.get(key), value)\".\n    //\n    // XXX we could allow arrays as long as we recursively check that there\n    // are no objects\n    if (typeof value !== 'string' &&\n        typeof value !== 'number' &&\n        typeof value !== 'boolean' &&\n        typeof value !== 'undefined' &&\n        !(value instanceof Date) &&\n        !(ObjectID && value instanceof ObjectID) &&\n        value !== null) {\n      throw new Error(\"ReactiveDict.equals: value must be scalar\");\n    }\n    var serializedValue = stringify(value);\n\n    if (Tracker.active) {\n      self._ensureKey(key);\n\n      if (! _.has(self.keyValueDeps[key], serializedValue))\n        self.keyValueDeps[key][serializedValue] = new Tracker.Dependency;\n\n      var isNew = self.keyValueDeps[key][serializedValue].depend();\n      if (isNew) {\n        Tracker.onInvalidate(function () {\n          // clean up [key][serializedValue] if it's now empty, so we don't\n          // use O(n) memory for n = values seen ever\n          if (! self.keyValueDeps[key][serializedValue].hasDependents())\n            delete self.keyValueDeps[key][serializedValue];\n        });\n      }\n    }\n\n    var oldValue = undefined;\n    if (_.has(self.keys, key)) oldValue = parse(self.keys[key]);\n    return EJSON.equals(oldValue, value);\n  },\n\n  all: function() {\n    this.allDeps.depend();\n    var ret = {};\n    _.each(this.keys, function(value, key) {\n      ret[key] = parse(value);\n    });\n    return ret;\n  },\n\n  clear: function() {\n    var self = this;\n\n    var oldKeys = self.keys;\n    self.keys = {};\n\n    self.allDeps.changed();\n\n    _.each(oldKeys, function(value, key) {\n      changed(self.keyDeps[key]);\n      changed(self.keyValueDeps[key][value]);\n      changed(self.keyValueDeps[key]['undefined']);\n    });\n\n  },\n\n  delete: function(key) {\n    var self = this;\n    var didRemove = false;\n\n    if (_.has(self.keys, key)) {\n      var oldValue = self.keys[key];\n      delete self.keys[key];\n      changed(self.keyDeps[key]);\n      if (self.keyValueDeps[key]) {\n        changed(self.keyValueDeps[key][oldValue]);\n        changed(self.keyValueDeps[key]['undefined']);\n      }\n      self.allDeps.changed();\n      didRemove = true;\n    }\n\n    return didRemove;\n  },\n\n  _setObject: function (object) {\n    var self = this;\n\n    _.each(object, function (value, key){\n      self.set(key, value);\n    });\n  },\n\n  _ensureKey: function (key) {\n    var self = this;\n    if (!(key in self.keyDeps)) {\n      self.keyDeps[key] = new Tracker.Dependency;\n      self.keyValueDeps[key] = {};\n    }\n  },\n\n  // Get a JSON value that can be passed to the constructor to\n  // create a new ReactiveDict with the same contents as this one\n  _getMigrationData: function () {\n    // XXX sanitize and make sure it's JSONible?\n    return this.keys;\n  }\n});\n","ReactiveDict._migratedDictData = {}; // name -> data\nReactiveDict._dictsToMigrate = {}; // name -> ReactiveDict\n\nReactiveDict._loadMigratedDict = function (dictName) {\n  if (_.has(ReactiveDict._migratedDictData, dictName))\n    return ReactiveDict._migratedDictData[dictName];\n\n  return null;\n};\n\nReactiveDict._registerDictForMigrate = function (dictName, dict) {\n  if (_.has(ReactiveDict._dictsToMigrate, dictName))\n    throw new Error(\"Duplicate ReactiveDict name: \" + dictName);\n\n  ReactiveDict._dictsToMigrate[dictName] = dict;\n};\n\nif (Meteor.isClient && Package.reload) {\n  // Put old migrated data into ReactiveDict._migratedDictData,\n  // where it can be accessed by ReactiveDict._loadMigratedDict.\n  var migrationData = Package.reload.Reload._migrationData('reactive-dict');\n  if (migrationData && migrationData.dicts)\n    ReactiveDict._migratedDictData = migrationData.dicts;\n\n  // On migration, assemble the data from all the dicts that have been\n  // registered.\n  Package.reload.Reload._onMigrate('reactive-dict', function () {\n    var dictsToMigrate = ReactiveDict._dictsToMigrate;\n    var dataToMigrate = {};\n\n    for (var dictName in dictsToMigrate)\n      dataToMigrate[dictName] = dictsToMigrate[dictName]._getMigrationData();\n\n    return [true, {dicts: dataToMigrate}];\n  });\n}\n"]}}]
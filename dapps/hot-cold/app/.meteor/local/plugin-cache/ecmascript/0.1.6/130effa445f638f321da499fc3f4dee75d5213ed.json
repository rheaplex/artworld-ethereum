{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"DDPServer = {};\n\nvar Fiber = Npm.require('fibers');\n\n// This file contains classes:\n// * Session - The server's connection to a single DDP client\n// * Subscription - A single subscription for a single client\n// * Server - An entire server that may talk to > 1 client. A DDP endpoint.\n//\n// Session and Subscription are file scope. For now, until we freeze\n// the interface, Server is package scope (in the future it should be\n// exported.)\n\n// Represents a single document in a SessionCollectionView\nvar SessionDocumentView = function () {\n  var self = this;\n  self.existsIn = {}; // set of subscriptionHandle\n  self.dataByKey = {}; // key-> [ {subscriptionHandle, value} by precedence]\n};\n\n_.extend(SessionDocumentView.prototype, {\n\n  getFields: function () {\n    var self = this;\n    var ret = {};\n    _.each(self.dataByKey, function (precedenceList, key) {\n      ret[key] = precedenceList[0].value;\n    });\n    return ret;\n  },\n\n  clearField: function (subscriptionHandle, key, changeCollector) {\n    var self = this;\n    // Publish API ignores _id if present in fields\n    if (key === \"_id\") return;\n    var precedenceList = self.dataByKey[key];\n\n    // It's okay to clear fields that didn't exist. No need to throw\n    // an error.\n    if (!precedenceList) return;\n\n    var removedValue = undefined;\n    for (var i = 0; i < precedenceList.length; i++) {\n      var precedence = precedenceList[i];\n      if (precedence.subscriptionHandle === subscriptionHandle) {\n        // The view's value can only change if this subscription is the one that\n        // used to have precedence.\n        if (i === 0) removedValue = precedence.value;\n        precedenceList.splice(i, 1);\n        break;\n      }\n    }\n    if (_.isEmpty(precedenceList)) {\n      delete self.dataByKey[key];\n      changeCollector[key] = undefined;\n    } else if (removedValue !== undefined && !EJSON.equals(removedValue, precedenceList[0].value)) {\n      changeCollector[key] = precedenceList[0].value;\n    }\n  },\n\n  changeField: function (subscriptionHandle, key, value, changeCollector, isAdd) {\n    var self = this;\n    // Publish API ignores _id if present in fields\n    if (key === \"_id\") return;\n\n    // Don't share state with the data passed in by the user.\n    value = EJSON.clone(value);\n\n    if (!_.has(self.dataByKey, key)) {\n      self.dataByKey[key] = [{ subscriptionHandle: subscriptionHandle,\n        value: value }];\n      changeCollector[key] = value;\n      return;\n    }\n    var precedenceList = self.dataByKey[key];\n    var elt;\n    if (!isAdd) {\n      elt = _.find(precedenceList, function (precedence) {\n        return precedence.subscriptionHandle === subscriptionHandle;\n      });\n    }\n\n    if (elt) {\n      if (elt === precedenceList[0] && !EJSON.equals(value, elt.value)) {\n        // this subscription is changing the value of this field.\n        changeCollector[key] = value;\n      }\n      elt.value = value;\n    } else {\n      // this subscription is newly caring about this field\n      precedenceList.push({ subscriptionHandle: subscriptionHandle, value: value });\n    }\n  }\n});\n\n/**\n * Represents a client's view of a single collection\n * @param {String} collectionName Name of the collection it represents\n * @param {Object.<String, Function>} sessionCallbacks The callbacks for added, changed, removed\n * @class SessionCollectionView\n */\nvar SessionCollectionView = function (collectionName, sessionCallbacks) {\n  var self = this;\n  self.collectionName = collectionName;\n  self.documents = {};\n  self.callbacks = sessionCallbacks;\n};\n\nDDPServer._SessionCollectionView = SessionCollectionView;\n\n_.extend(SessionCollectionView.prototype, {\n\n  isEmpty: function () {\n    var self = this;\n    return _.isEmpty(self.documents);\n  },\n\n  diff: function (previous) {\n    var self = this;\n    DiffSequence.diffObjects(previous.documents, self.documents, {\n      both: _.bind(self.diffDocument, self),\n\n      rightOnly: function (id, nowDV) {\n        self.callbacks.added(self.collectionName, id, nowDV.getFields());\n      },\n\n      leftOnly: function (id, prevDV) {\n        self.callbacks.removed(self.collectionName, id);\n      }\n    });\n  },\n\n  diffDocument: function (id, prevDV, nowDV) {\n    var self = this;\n    var fields = {};\n    DiffSequence.diffObjects(prevDV.getFields(), nowDV.getFields(), {\n      both: function (key, prev, now) {\n        if (!EJSON.equals(prev, now)) fields[key] = now;\n      },\n      rightOnly: function (key, now) {\n        fields[key] = now;\n      },\n      leftOnly: function (key, prev) {\n        fields[key] = undefined;\n      }\n    });\n    self.callbacks.changed(self.collectionName, id, fields);\n  },\n\n  added: function (subscriptionHandle, id, fields) {\n    var self = this;\n    var docView = self.documents[id];\n    var added = false;\n    if (!docView) {\n      added = true;\n      docView = new SessionDocumentView();\n      self.documents[id] = docView;\n    }\n    docView.existsIn[subscriptionHandle] = true;\n    var changeCollector = {};\n    _.each(fields, function (value, key) {\n      docView.changeField(subscriptionHandle, key, value, changeCollector, true);\n    });\n    if (added) self.callbacks.added(self.collectionName, id, changeCollector);else self.callbacks.changed(self.collectionName, id, changeCollector);\n  },\n\n  changed: function (subscriptionHandle, id, changed) {\n    var self = this;\n    var changedResult = {};\n    var docView = self.documents[id];\n    if (!docView) throw new Error(\"Could not find element with id \" + id + \" to change\");\n    _.each(changed, function (value, key) {\n      if (value === undefined) docView.clearField(subscriptionHandle, key, changedResult);else docView.changeField(subscriptionHandle, key, value, changedResult);\n    });\n    self.callbacks.changed(self.collectionName, id, changedResult);\n  },\n\n  removed: function (subscriptionHandle, id) {\n    var self = this;\n    var docView = self.documents[id];\n    if (!docView) {\n      var err = new Error(\"Removed nonexistent document \" + id);\n      throw err;\n    }\n    delete docView.existsIn[subscriptionHandle];\n    if (_.isEmpty(docView.existsIn)) {\n      // it is gone from everyone\n      self.callbacks.removed(self.collectionName, id);\n      delete self.documents[id];\n    } else {\n      var changed = {};\n      // remove this subscription from every precedence list\n      // and record the changes\n      _.each(docView.dataByKey, function (precedenceList, key) {\n        docView.clearField(subscriptionHandle, key, changed);\n      });\n\n      self.callbacks.changed(self.collectionName, id, changed);\n    }\n  }\n});\n\n/******************************************************************************/\n/* Session                                                                    */\n/******************************************************************************/\n\nvar Session = function (server, version, socket, options) {\n  var self = this;\n  self.id = Random.id();\n\n  self.server = server;\n  self.version = version;\n\n  self.initialized = false;\n  self.socket = socket;\n\n  // set to null when the session is destroyed. multiple places below\n  // use this to determine if the session is alive or not.\n  self.inQueue = new Meteor._DoubleEndedQueue();\n\n  self.blocked = false;\n  self.workerRunning = false;\n\n  // Sub objects for active subscriptions\n  self._namedSubs = {};\n  self._universalSubs = [];\n\n  self.userId = null;\n\n  self.collectionViews = {};\n\n  // Set this to false to not send messages when collectionViews are\n  // modified. This is done when rerunning subs in _setUserId and those messages\n  // are calculated via a diff instead.\n  self._isSending = true;\n\n  // If this is true, don't start a newly-created universal publisher on this\n  // session. The session will take care of starting it when appropriate.\n  self._dontStartNewUniversalSubs = false;\n\n  // when we are rerunning subscriptions, any ready messages\n  // we want to buffer up for when we are done rerunning subscriptions\n  self._pendingReady = [];\n\n  // List of callbacks to call when this connection is closed.\n  self._closeCallbacks = [];\n\n  // XXX HACK: If a sockjs connection, save off the URL. This is\n  // temporary and will go away in the near future.\n  self._socketUrl = socket.url;\n\n  // Allow tests to disable responding to pings.\n  self._respondToPings = options.respondToPings;\n\n  // This object is the public interface to the session. In the public\n  // API, it is called the `connection` object.  Internally we call it\n  // a `connectionHandle` to avoid ambiguity.\n  self.connectionHandle = {\n    id: self.id,\n    close: function () {\n      self.close();\n    },\n    onClose: function (fn) {\n      var cb = Meteor.bindEnvironment(fn, \"connection onClose callback\");\n      if (self.inQueue) {\n        self._closeCallbacks.push(cb);\n      } else {\n        // if we're already closed, call the callback.\n        Meteor.defer(cb);\n      }\n    },\n    clientAddress: self._clientAddress(),\n    httpHeaders: self.socket.headers\n  };\n\n  socket.send(DDPCommon.stringifyDDP({ msg: 'connected',\n    session: self.id }));\n  // On initial connect, spin up all the universal publishers.\n  Fiber(function () {\n    self.startUniversalSubs();\n  }).run();\n\n  if (version !== 'pre1' && options.heartbeatInterval !== 0) {\n    self.heartbeat = new DDPCommon.Heartbeat({\n      heartbeatInterval: options.heartbeatInterval,\n      heartbeatTimeout: options.heartbeatTimeout,\n      onTimeout: function () {\n        self.close();\n      },\n      sendPing: function () {\n        self.send({ msg: 'ping' });\n      }\n    });\n    self.heartbeat.start();\n  }\n\n  Package.facts && Package.facts.Facts.incrementServerFact(\"livedata\", \"sessions\", 1);\n};\n\n_.extend(Session.prototype, {\n\n  sendReady: function (subscriptionIds) {\n    var self = this;\n    if (self._isSending) self.send({ msg: \"ready\", subs: subscriptionIds });else {\n      _.each(subscriptionIds, function (subscriptionId) {\n        self._pendingReady.push(subscriptionId);\n      });\n    }\n  },\n\n  sendAdded: function (collectionName, id, fields) {\n    var self = this;\n    if (self._isSending) self.send({ msg: \"added\", collection: collectionName, id: id, fields: fields });\n  },\n\n  sendChanged: function (collectionName, id, fields) {\n    var self = this;\n    if (_.isEmpty(fields)) return;\n\n    if (self._isSending) {\n      self.send({\n        msg: \"changed\",\n        collection: collectionName,\n        id: id,\n        fields: fields\n      });\n    }\n  },\n\n  sendRemoved: function (collectionName, id) {\n    var self = this;\n    if (self._isSending) self.send({ msg: \"removed\", collection: collectionName, id: id });\n  },\n\n  getSendCallbacks: function () {\n    var self = this;\n    return {\n      added: _.bind(self.sendAdded, self),\n      changed: _.bind(self.sendChanged, self),\n      removed: _.bind(self.sendRemoved, self)\n    };\n  },\n\n  getCollectionView: function (collectionName) {\n    var self = this;\n    if (_.has(self.collectionViews, collectionName)) {\n      return self.collectionViews[collectionName];\n    }\n    var ret = new SessionCollectionView(collectionName, self.getSendCallbacks());\n    self.collectionViews[collectionName] = ret;\n    return ret;\n  },\n\n  added: function (subscriptionHandle, collectionName, id, fields) {\n    var self = this;\n    var view = self.getCollectionView(collectionName);\n    view.added(subscriptionHandle, id, fields);\n  },\n\n  removed: function (subscriptionHandle, collectionName, id) {\n    var self = this;\n    var view = self.getCollectionView(collectionName);\n    view.removed(subscriptionHandle, id);\n    if (view.isEmpty()) {\n      delete self.collectionViews[collectionName];\n    }\n  },\n\n  changed: function (subscriptionHandle, collectionName, id, fields) {\n    var self = this;\n    var view = self.getCollectionView(collectionName);\n    view.changed(subscriptionHandle, id, fields);\n  },\n\n  startUniversalSubs: function () {\n    var self = this;\n    // Make a shallow copy of the set of universal handlers and start them. If\n    // additional universal publishers start while we're running them (due to\n    // yielding), they will run separately as part of Server.publish.\n    var handlers = _.clone(self.server.universal_publish_handlers);\n    _.each(handlers, function (handler) {\n      self._startSubscription(handler);\n    });\n  },\n\n  // Destroy this session and unregister it at the server.\n  close: function () {\n    var self = this;\n\n    // Destroy this session, even if it's not registered at the\n    // server. Stop all processing and tear everything down. If a socket\n    // was attached, close it.\n\n    // Already destroyed.\n    if (!self.inQueue) return;\n\n    // Drop the merge box data immediately.\n    self.inQueue = null;\n    self.collectionViews = {};\n\n    if (self.heartbeat) {\n      self.heartbeat.stop();\n      self.heartbeat = null;\n    }\n\n    if (self.socket) {\n      self.socket.close();\n      self.socket._meteorSession = null;\n    }\n\n    Package.facts && Package.facts.Facts.incrementServerFact(\"livedata\", \"sessions\", -1);\n\n    Meteor.defer(function () {\n      // stop callbacks can yield, so we defer this on close.\n      // sub._isDeactivated() detects that we set inQueue to null and\n      // treats it as semi-deactivated (it will ignore incoming callbacks, etc).\n      self._deactivateAllSubscriptions();\n\n      // Defer calling the close callbacks, so that the caller closing\n      // the session isn't waiting for all the callbacks to complete.\n      _.each(self._closeCallbacks, function (callback) {\n        callback();\n      });\n    });\n\n    // Unregister the session.\n    self.server._removeSession(self);\n  },\n\n  // Send a message (doing nothing if no socket is connected right now.)\n  // It should be a JSON object (it will be stringified.)\n  send: function (msg) {\n    var self = this;\n    if (self.socket) {\n      if (Meteor._printSentDDP) Meteor._debug(\"Sent DDP\", DDPCommon.stringifyDDP(msg));\n      self.socket.send(DDPCommon.stringifyDDP(msg));\n    }\n  },\n\n  // Send a connection error.\n  sendError: function (reason, offendingMessage) {\n    var self = this;\n    var msg = { msg: 'error', reason: reason };\n    if (offendingMessage) msg.offendingMessage = offendingMessage;\n    self.send(msg);\n  },\n\n  // Process 'msg' as an incoming message. (But as a guard against\n  // race conditions during reconnection, ignore the message if\n  // 'socket' is not the currently connected socket.)\n  //\n  // We run the messages from the client one at a time, in the order\n  // given by the client. The message handler is passed an idempotent\n  // function 'unblock' which it may call to allow other messages to\n  // begin running in parallel in another fiber (for example, a method\n  // that wants to yield.) Otherwise, it is automatically unblocked\n  // when it returns.\n  //\n  // Actually, we don't have to 'totally order' the messages in this\n  // way, but it's the easiest thing that's correct. (unsub needs to\n  // be ordered against sub, methods need to be ordered against each\n  // other.)\n  processMessage: function (msg_in) {\n    var self = this;\n    if (!self.inQueue) // we have been destroyed.\n      return;\n\n    // Respond to ping and pong messages immediately without queuing.\n    // If the negotiated DDP version is \"pre1\" which didn't support\n    // pings, preserve the \"pre1\" behavior of responding with a \"bad\n    // request\" for the unknown messages.\n    //\n    // Fibers are needed because heartbeat uses Meteor.setTimeout, which\n    // needs a Fiber. We could actually use regular setTimeout and avoid\n    // these new fibers, but it is easier to just make everything use\n    // Meteor.setTimeout and not think too hard.\n    //\n    // Any message counts as receiving a pong, as it demonstrates that\n    // the client is still alive.\n    if (self.heartbeat) {\n      Fiber(function () {\n        self.heartbeat.messageReceived();\n      }).run();\n    }\n\n    if (self.version !== 'pre1' && msg_in.msg === 'ping') {\n      if (self._respondToPings) self.send({ msg: \"pong\", id: msg_in.id });\n      return;\n    }\n    if (self.version !== 'pre1' && msg_in.msg === 'pong') {\n      // Since everything is a pong, nothing to do\n      return;\n    }\n\n    self.inQueue.push(msg_in);\n    if (self.workerRunning) return;\n    self.workerRunning = true;\n\n    var processNext = function () {\n      var msg = self.inQueue && self.inQueue.shift();\n      if (!msg) {\n        self.workerRunning = false;\n        return;\n      }\n\n      Fiber(function () {\n        var blocked = true;\n\n        var unblock = function () {\n          if (!blocked) return; // idempotent\n          blocked = false;\n          processNext();\n        };\n\n        if (_.has(self.protocol_handlers, msg.msg)) self.protocol_handlers[msg.msg].call(self, msg, unblock);else self.sendError('Bad request', msg);\n        unblock(); // in case the handler didn't already do it\n      }).run();\n    };\n\n    processNext();\n  },\n\n  protocol_handlers: {\n    sub: function (msg) {\n      var self = this;\n\n      // reject malformed messages\n      if (typeof msg.id !== \"string\" || typeof msg.name !== \"string\" || 'params' in msg && !(msg.params instanceof Array)) {\n        self.sendError(\"Malformed subscription\", msg);\n        return;\n      }\n\n      if (!self.server.publish_handlers[msg.name]) {\n        self.send({\n          msg: 'nosub', id: msg.id,\n          error: new Meteor.Error(404, \"Subscription not found\") });\n        return;\n      }\n\n      if (_.has(self._namedSubs, msg.id))\n        // subs are idempotent, or rather, they are ignored if a sub\n        // with that id already exists. this is important during\n        // reconnect.\n        return;\n\n      // XXX It'd be much better if we had generic hooks where any package can\n      // hook into subscription handling, but in the mean while we special case\n      // ddp-rate-limiter package. This is also done for weak requirements to\n      // add the ddp-rate-limiter package in case we don't have Accounts. A\n      // user trying to use the ddp-rate-limiter must explicitly require it.\n      if (Package['ddp-rate-limiter']) {\n        var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\n        var rateLimiterInput = {\n          userId: self.userId,\n          clientAddress: self.connectionHandle.clientAddress,\n          type: \"subscription\",\n          name: msg.name,\n          connectionId: self.id\n        };\n\n        DDPRateLimiter._increment(rateLimiterInput);\n        var rateLimitResult = DDPRateLimiter._check(rateLimiterInput);\n        if (!rateLimitResult.allowed) {\n          self.send({\n            msg: 'nosub', id: msg.id,\n            error: new Meteor.Error('too-many-requests', DDPRateLimiter.getErrorMessage(rateLimitResult), { timeToReset: rateLimitResult.timeToReset })\n          });\n          return;\n        }\n      }\n\n      var handler = self.server.publish_handlers[msg.name];\n\n      self._startSubscription(handler, msg.id, msg.params, msg.name);\n    },\n\n    unsub: function (msg) {\n      var self = this;\n\n      self._stopSubscription(msg.id);\n    },\n\n    method: function (msg, unblock) {\n      var self = this;\n\n      // reject malformed messages\n      // For now, we silently ignore unknown attributes,\n      // for forwards compatibility.\n      if (typeof msg.id !== \"string\" || typeof msg.method !== \"string\" || 'params' in msg && !(msg.params instanceof Array) || 'randomSeed' in msg && typeof msg.randomSeed !== \"string\") {\n        self.sendError(\"Malformed method invocation\", msg);\n        return;\n      }\n\n      var randomSeed = msg.randomSeed || null;\n\n      // set up to mark the method as satisfied once all observers\n      // (and subscriptions) have reacted to any writes that were\n      // done.\n      var fence = new DDPServer._WriteFence();\n      fence.onAllCommitted(function () {\n        // Retire the fence so that future writes are allowed.\n        // This means that callbacks like timers are free to use\n        // the fence, and if they fire before it's armed (for\n        // example, because the method waits for them) their\n        // writes will be included in the fence.\n        fence.retire();\n        self.send({\n          msg: 'updated', methods: [msg.id] });\n      });\n\n      // find the handler\n      var handler = self.server.method_handlers[msg.method];\n      if (!handler) {\n        self.send({\n          msg: 'result', id: msg.id,\n          error: new Meteor.Error(404, \"Method not found\") });\n        fence.arm();\n        return;\n      }\n\n      var setUserId = function (userId) {\n        self._setUserId(userId);\n      };\n\n      var invocation = new DDPCommon.MethodInvocation({\n        isSimulation: false,\n        userId: self.userId,\n        setUserId: setUserId,\n        unblock: unblock,\n        connection: self.connectionHandle,\n        randomSeed: randomSeed\n      });\n\n      var promise = new Promise(function (resolve, reject) {\n        // XXX It'd be better if we could hook into method handlers better but\n        // for now, we need to check if the ddp-rate-limiter exists since we\n        // have a weak requirement for the ddp-rate-limiter package to be added\n        // to our application.\n        if (Package['ddp-rate-limiter']) {\n          var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\n          var rateLimiterInput = {\n            userId: self.userId,\n            clientAddress: self.connectionHandle.clientAddress,\n            type: \"method\",\n            name: msg.method,\n            connectionId: self.id\n          };\n          DDPRateLimiter._increment(rateLimiterInput);\n          var rateLimitResult = DDPRateLimiter._check(rateLimiterInput);\n          if (!rateLimitResult.allowed) {\n            reject(new Meteor.Error(\"too-many-requests\", DDPRateLimiter.getErrorMessage(rateLimitResult), { timeToReset: rateLimitResult.timeToReset }));\n            return;\n          }\n        }\n\n        resolve(DDPServer._CurrentWriteFence.withValue(fence, function () {\n          return DDP._CurrentInvocation.withValue(invocation, function () {\n            return maybeAuditArgumentChecks(handler, invocation, msg.params, \"call to '\" + msg.method + \"'\");\n          });\n        }));\n      });\n\n      function finish() {\n        fence.arm();\n        unblock();\n      }\n\n      var payload = {\n        msg: \"result\",\n        id: msg.id\n      };\n\n      promise.then(function (result) {\n        finish();\n        if (result !== undefined) {\n          payload.result = result;\n        }\n        self.send(payload);\n      }, function (exception) {\n        finish();\n        payload.error = wrapInternalException(exception, \"while invoking method '\" + msg.method + \"'\");\n        self.send(payload);\n      });\n    }\n  },\n\n  _eachSub: function (f) {\n    var self = this;\n    _.each(self._namedSubs, f);\n    _.each(self._universalSubs, f);\n  },\n\n  _diffCollectionViews: function (beforeCVs) {\n    var self = this;\n    DiffSequence.diffObjects(beforeCVs, self.collectionViews, {\n      both: function (collectionName, leftValue, rightValue) {\n        rightValue.diff(leftValue);\n      },\n      rightOnly: function (collectionName, rightValue) {\n        _.each(rightValue.documents, function (docView, id) {\n          self.sendAdded(collectionName, id, docView.getFields());\n        });\n      },\n      leftOnly: function (collectionName, leftValue) {\n        _.each(leftValue.documents, function (doc, id) {\n          self.sendRemoved(collectionName, id);\n        });\n      }\n    });\n  },\n\n  // Sets the current user id in all appropriate contexts and reruns\n  // all subscriptions\n  _setUserId: function (userId) {\n    var self = this;\n\n    if (userId !== null && typeof userId !== \"string\") throw new Error(\"setUserId must be called on string or null, not \" + typeof userId);\n\n    // Prevent newly-created universal subscriptions from being added to our\n    // session; they will be found below when we call startUniversalSubs.\n    //\n    // (We don't have to worry about named subscriptions, because we only add\n    // them when we process a 'sub' message. We are currently processing a\n    // 'method' message, and the method did not unblock, because it is illegal\n    // to call setUserId after unblock. Thus we cannot be concurrently adding a\n    // new named subscription.)\n    self._dontStartNewUniversalSubs = true;\n\n    // Prevent current subs from updating our collectionViews and call their\n    // stop callbacks. This may yield.\n    self._eachSub(function (sub) {\n      sub._deactivate();\n    });\n\n    // All subs should now be deactivated. Stop sending messages to the client,\n    // save the state of the published collections, reset to an empty view, and\n    // update the userId.\n    self._isSending = false;\n    var beforeCVs = self.collectionViews;\n    self.collectionViews = {};\n    self.userId = userId;\n\n    // Save the old named subs, and reset to having no subscriptions.\n    var oldNamedSubs = self._namedSubs;\n    self._namedSubs = {};\n    self._universalSubs = [];\n\n    _.each(oldNamedSubs, function (sub, subscriptionId) {\n      self._namedSubs[subscriptionId] = sub._recreate();\n      // nb: if the handler throws or calls this.error(), it will in fact\n      // immediately send its 'nosub'. This is OK, though.\n      self._namedSubs[subscriptionId]._runHandler();\n    });\n\n    // Allow newly-created universal subs to be started on our connection in\n    // parallel with the ones we're spinning up here, and spin up universal\n    // subs.\n    self._dontStartNewUniversalSubs = false;\n    self.startUniversalSubs();\n\n    // Start sending messages again, beginning with the diff from the previous\n    // state of the world to the current state. No yields are allowed during\n    // this diff, so that other changes cannot interleave.\n    Meteor._noYieldsAllowed(function () {\n      self._isSending = true;\n      self._diffCollectionViews(beforeCVs);\n      if (!_.isEmpty(self._pendingReady)) {\n        self.sendReady(self._pendingReady);\n        self._pendingReady = [];\n      }\n    });\n  },\n\n  _startSubscription: function (handler, subId, params, name) {\n    var self = this;\n\n    var sub = new Subscription(self, handler, subId, params, name);\n    if (subId) self._namedSubs[subId] = sub;else self._universalSubs.push(sub);\n\n    sub._runHandler();\n  },\n\n  // tear down specified subscription\n  _stopSubscription: function (subId, error) {\n    var self = this;\n\n    var subName = null;\n\n    if (subId && self._namedSubs[subId]) {\n      subName = self._namedSubs[subId]._name;\n      self._namedSubs[subId]._removeAllDocuments();\n      self._namedSubs[subId]._deactivate();\n      delete self._namedSubs[subId];\n    }\n\n    var response = { msg: 'nosub', id: subId };\n\n    if (error) {\n      response.error = wrapInternalException(error, subName ? \"from sub \" + subName + \" id \" + subId : \"from sub id \" + subId);\n    }\n\n    self.send(response);\n  },\n\n  // tear down all subscriptions. Note that this does NOT send removed or nosub\n  // messages, since we assume the client is gone.\n  _deactivateAllSubscriptions: function () {\n    var self = this;\n\n    _.each(self._namedSubs, function (sub, id) {\n      sub._deactivate();\n    });\n    self._namedSubs = {};\n\n    _.each(self._universalSubs, function (sub) {\n      sub._deactivate();\n    });\n    self._universalSubs = [];\n  },\n\n  // Determine the remote client's IP address, based on the\n  // HTTP_FORWARDED_COUNT environment variable representing how many\n  // proxies the server is behind.\n  _clientAddress: function () {\n    var self = this;\n\n    // For the reported client address for a connection to be correct,\n    // the developer must set the HTTP_FORWARDED_COUNT environment\n    // variable to an integer representing the number of hops they\n    // expect in the `x-forwarded-for` header. E.g., set to \"1\" if the\n    // server is behind one proxy.\n    //\n    // This could be computed once at startup instead of every time.\n    var httpForwardedCount = parseInt(process.env['HTTP_FORWARDED_COUNT']) || 0;\n\n    if (httpForwardedCount === 0) return self.socket.remoteAddress;\n\n    var forwardedFor = self.socket.headers[\"x-forwarded-for\"];\n    if (!_.isString(forwardedFor)) return null;\n    forwardedFor = forwardedFor.trim().split(/\\s*,\\s*/);\n\n    // Typically the first value in the `x-forwarded-for` header is\n    // the original IP address of the client connecting to the first\n    // proxy.  However, the end user can easily spoof the header, in\n    // which case the first value(s) will be the fake IP address from\n    // the user pretending to be a proxy reporting the original IP\n    // address value.  By counting HTTP_FORWARDED_COUNT back from the\n    // end of the list, we ensure that we get the IP address being\n    // reported by *our* first proxy.\n\n    if (httpForwardedCount < 0 || httpForwardedCount > forwardedFor.length) return null;\n\n    return forwardedFor[forwardedFor.length - httpForwardedCount];\n  }\n});\n\n/******************************************************************************/\n/* Subscription                                                               */\n/******************************************************************************/\n\n// ctor for a sub handle: the input to each publish function\n\n// Instance name is this because it's usually referred to as this inside a\n// publish\n/**\n * @summary The server's side of a subscription\n * @class Subscription\n * @instanceName this\n */\nvar Subscription = function (session, handler, subscriptionId, params, name) {\n  var self = this;\n  self._session = session; // type is Session\n\n  /**\n   * @summary Access inside the publish function. The incoming [connection](#meteor_onconnection) for this subscription.\n   * @locus Server\n   * @name  connection\n   * @memberOf Subscription\n   * @instance\n   */\n  self.connection = session.connectionHandle; // public API object\n\n  self._handler = handler;\n\n  // my subscription ID (generated by client, undefined for universal subs).\n  self._subscriptionId = subscriptionId;\n  // undefined for universal subs\n  self._name = name;\n\n  self._params = params || [];\n\n  // Only named subscriptions have IDs, but we need some sort of string\n  // internally to keep track of all subscriptions inside\n  // SessionDocumentViews. We use this subscriptionHandle for that.\n  if (self._subscriptionId) {\n    self._subscriptionHandle = 'N' + self._subscriptionId;\n  } else {\n    self._subscriptionHandle = 'U' + Random.id();\n  }\n\n  // has _deactivate been called?\n  self._deactivated = false;\n\n  // stop callbacks to g/c this sub.  called w/ zero arguments.\n  self._stopCallbacks = [];\n\n  // the set of (collection, documentid) that this subscription has\n  // an opinion about\n  self._documents = {};\n\n  // remember if we are ready.\n  self._ready = false;\n\n  // Part of the public API: the user of this sub.\n\n  /**\n   * @summary Access inside the publish function. The id of the logged-in user, or `null` if no user is logged in.\n   * @locus Server\n   * @memberOf Subscription\n   * @name  userId\n   * @instance\n   */\n  self.userId = session.userId;\n\n  // For now, the id filter is going to default to\n  // the to/from DDP methods on MongoID, to\n  // specifically deal with mongo/minimongo ObjectIds.\n\n  // Later, you will be able to make this be \"raw\"\n  // if you want to publish a collection that you know\n  // just has strings for keys and no funny business, to\n  // a ddp consumer that isn't minimongo\n\n  self._idFilter = {\n    idStringify: MongoID.idStringify,\n    idParse: MongoID.idParse\n  };\n\n  Package.facts && Package.facts.Facts.incrementServerFact(\"livedata\", \"subscriptions\", 1);\n};\n\n_.extend(Subscription.prototype, {\n  _runHandler: function () {\n    // XXX should we unblock() here? Either before running the publish\n    // function, or before running _publishCursor.\n    //\n    // Right now, each publish function blocks all future publishes and\n    // methods waiting on data from Mongo (or whatever else the function\n    // blocks on). This probably slows page load in common cases.\n\n    var self = this;\n    try {\n      var res = maybeAuditArgumentChecks(self._handler, self, EJSON.clone(self._params),\n      // It's OK that this would look weird for universal subscriptions,\n      // because they have no arguments so there can never be an\n      // audit-argument-checks failure.\n      \"publisher '\" + self._name + \"'\");\n    } catch (e) {\n      self.error(e);\n      return;\n    }\n\n    // Did the handler call this.error or this.stop?\n    if (self._isDeactivated()) return;\n\n    self._publishHandlerResult(res);\n  },\n\n  _publishHandlerResult: function (res) {\n    // SPECIAL CASE: Instead of writing their own callbacks that invoke\n    // this.added/changed/ready/etc, the user can just return a collection\n    // cursor or array of cursors from the publish function; we call their\n    // _publishCursor method which starts observing the cursor and publishes the\n    // results. Note that _publishCursor does NOT call ready().\n    //\n    // XXX This uses an undocumented interface which only the Mongo cursor\n    // interface publishes. Should we make this interface public and encourage\n    // users to implement it themselves? Arguably, it's unnecessary; users can\n    // already write their own functions like\n    //   var publishMyReactiveThingy = function (name, handler) {\n    //     Meteor.publish(name, function () {\n    //       var reactiveThingy = handler();\n    //       reactiveThingy.publishMe();\n    //     });\n    //   };\n\n    var self = this;\n    var isCursor = function (c) {\n      return c && c._publishCursor;\n    };\n    if (isCursor(res)) {\n      try {\n        res._publishCursor(self);\n      } catch (e) {\n        self.error(e);\n        return;\n      }\n      // _publishCursor only returns after the initial added callbacks have run.\n      // mark subscription as ready.\n      self.ready();\n    } else if (_.isArray(res)) {\n      // check all the elements are cursors\n      if (!_.all(res, isCursor)) {\n        self.error(new Error(\"Publish function returned an array of non-Cursors\"));\n        return;\n      }\n      // find duplicate collection names\n      // XXX we should support overlapping cursors, but that would require the\n      // merge box to allow overlap within a subscription\n      var collectionNames = {};\n      for (var i = 0; i < res.length; ++i) {\n        var collectionName = res[i]._getCollectionName();\n        if (_.has(collectionNames, collectionName)) {\n          self.error(new Error(\"Publish function returned multiple cursors for collection \" + collectionName));\n          return;\n        }\n        collectionNames[collectionName] = true;\n      };\n\n      try {\n        _.each(res, function (cur) {\n          cur._publishCursor(self);\n        });\n      } catch (e) {\n        self.error(e);\n        return;\n      }\n      self.ready();\n    } else if (res) {\n      // truthy values other than cursors or arrays are probably a\n      // user mistake (possible returning a Mongo document via, say,\n      // `coll.findOne()`).\n      self.error(new Error(\"Publish function can only return a Cursor or \" + \"an array of Cursors\"));\n    }\n  },\n\n  // This calls all stop callbacks and prevents the handler from updating any\n  // SessionCollectionViews further. It's used when the user unsubscribes or\n  // disconnects, as well as during setUserId re-runs. It does *NOT* send\n  // removed messages for the published objects; if that is necessary, call\n  // _removeAllDocuments first.\n  _deactivate: function () {\n    var self = this;\n    if (self._deactivated) return;\n    self._deactivated = true;\n    self._callStopCallbacks();\n    Package.facts && Package.facts.Facts.incrementServerFact(\"livedata\", \"subscriptions\", -1);\n  },\n\n  _callStopCallbacks: function () {\n    var self = this;\n    // tell listeners, so they can clean up\n    var callbacks = self._stopCallbacks;\n    self._stopCallbacks = [];\n    _.each(callbacks, function (callback) {\n      callback();\n    });\n  },\n\n  // Send remove messages for every document.\n  _removeAllDocuments: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      _.each(self._documents, function (collectionDocs, collectionName) {\n        // Iterate over _.keys instead of the dictionary itself, since we'll be\n        // mutating it.\n        _.each(_.keys(collectionDocs), function (strId) {\n          self.removed(collectionName, self._idFilter.idParse(strId));\n        });\n      });\n    });\n  },\n\n  // Returns a new Subscription for the same session with the same\n  // initial creation parameters. This isn't a clone: it doesn't have\n  // the same _documents cache, stopped state or callbacks; may have a\n  // different _subscriptionHandle, and gets its userId from the\n  // session, not from this object.\n  _recreate: function () {\n    var self = this;\n    return new Subscription(self._session, self._handler, self._subscriptionId, self._params, self._name);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Stops this client's subscription, triggering a call on the client to the `onStop` callback passed to [`Meteor.subscribe`](#meteor_subscribe), if any. If `error` is not a [`Meteor.Error`](#meteor_error), it will be [sanitized](#meteor_error).\n   * @locus Server\n   * @param {Error} error The error to pass to the client.\n   * @instance\n   * @memberOf Subscription\n   */\n  error: function (error) {\n    var self = this;\n    if (self._isDeactivated()) return;\n    self._session._stopSubscription(self._subscriptionId, error);\n  },\n\n  // Note that while our DDP client will notice that you've called stop() on the\n  // server (and clean up its _subscriptions table) we don't actually provide a\n  // mechanism for an app to notice this (the subscribe onError callback only\n  // triggers if there is an error).\n\n  /**\n   * @summary Call inside the publish function.  Stops this client's subscription and invokes the client's `onStop` callback with no error.\n   * @locus Server\n   * @instance\n   * @memberOf Subscription\n   */\n  stop: function () {\n    var self = this;\n    if (self._isDeactivated()) return;\n    self._session._stopSubscription(self._subscriptionId);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Registers a callback function to run when the subscription is stopped.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {Function} func The callback function\n   */\n  onStop: function (callback) {\n    var self = this;\n    if (self._isDeactivated()) callback();else self._stopCallbacks.push(callback);\n  },\n\n  // This returns true if the sub has been deactivated, *OR* if the session was\n  // destroyed but the deferred call to _deactivateAllSubscriptions hasn't\n  // happened yet.\n  _isDeactivated: function () {\n    var self = this;\n    return self._deactivated || self._session.inQueue === null;\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document has been added to the record set.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that contains the new document.\n   * @param {String} id The new document's ID.\n   * @param {Object} fields The fields in the new document.  If `_id` is present it is ignored.\n   */\n  added: function (collectionName, id, fields) {\n    var self = this;\n    if (self._isDeactivated()) return;\n    id = self._idFilter.idStringify(id);\n    Meteor._ensure(self._documents, collectionName)[id] = true;\n    self._session.added(self._subscriptionHandle, collectionName, id, fields);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document in the record set has been modified.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that contains the changed document.\n   * @param {String} id The changed document's ID.\n   * @param {Object} fields The fields in the document that have changed, together with their new values.  If a field is not present in `fields` it was left unchanged; if it is present in `fields` and has a value of `undefined` it was removed from the document.  If `_id` is present it is ignored.\n   */\n  changed: function (collectionName, id, fields) {\n    var self = this;\n    if (self._isDeactivated()) return;\n    id = self._idFilter.idStringify(id);\n    self._session.changed(self._subscriptionHandle, collectionName, id, fields);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document has been removed from the record set.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that the document has been removed from.\n   * @param {String} id The ID of the document that has been removed.\n   */\n  removed: function (collectionName, id) {\n    var self = this;\n    if (self._isDeactivated()) return;\n    id = self._idFilter.idStringify(id);\n    // We don't bother to delete sets of things in a collection if the\n    // collection is empty.  It could break _removeAllDocuments.\n    delete self._documents[collectionName][id];\n    self._session.removed(self._subscriptionHandle, collectionName, id);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that an initial, complete snapshot of the record set has been sent.  This will trigger a call on the client to the `onReady` callback passed to  [`Meteor.subscribe`](#meteor_subscribe), if any.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   */\n  ready: function () {\n    var self = this;\n    if (self._isDeactivated()) return;\n    if (!self._subscriptionId) return; // unnecessary but ignored for universal sub\n    if (!self._ready) {\n      self._session.sendReady([self._subscriptionId]);\n      self._ready = true;\n    }\n  }\n});\n\n/******************************************************************************/\n/* Server                                                                     */\n/******************************************************************************/\n\nServer = function (options) {\n  var self = this;\n\n  // The default heartbeat interval is 30 seconds on the server and 35\n  // seconds on the client.  Since the client doesn't need to send a\n  // ping as long as it is receiving pings, this means that pings\n  // normally go from the server to the client.\n  //\n  // Note: Troposphere depends on the ability to mutate\n  // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.\n  self.options = _.defaults(options || {}, {\n    heartbeatInterval: 15000,\n    heartbeatTimeout: 15000,\n    // For testing, allow responding to pings to be disabled.\n    respondToPings: true\n  });\n\n  // Map of callbacks to call when a new connection comes in to the\n  // server and completes DDP version negotiation. Use an object instead\n  // of an array so we can safely remove one from the list while\n  // iterating over it.\n  self.onConnectionHook = new Hook({\n    debugPrintExceptions: \"onConnection callback\"\n  });\n\n  self.publish_handlers = {};\n  self.universal_publish_handlers = [];\n\n  self.method_handlers = {};\n\n  self.sessions = {}; // map from id to session\n\n  self.stream_server = new StreamServer();\n\n  self.stream_server.register(function (socket) {\n    // socket implements the SockJSConnection interface\n    socket._meteorSession = null;\n\n    var sendError = function (reason, offendingMessage) {\n      var msg = { msg: 'error', reason: reason };\n      if (offendingMessage) msg.offendingMessage = offendingMessage;\n      socket.send(DDPCommon.stringifyDDP(msg));\n    };\n\n    socket.on('data', function (raw_msg) {\n      if (Meteor._printReceivedDDP) {\n        Meteor._debug(\"Received DDP\", raw_msg);\n      }\n      try {\n        try {\n          var msg = DDPCommon.parseDDP(raw_msg);\n        } catch (err) {\n          sendError('Parse error');\n          return;\n        }\n        if (msg === null || !msg.msg) {\n          sendError('Bad request', msg);\n          return;\n        }\n\n        if (msg.msg === 'connect') {\n          if (socket._meteorSession) {\n            sendError(\"Already connected\", msg);\n            return;\n          }\n          Fiber(function () {\n            self._handleConnect(socket, msg);\n          }).run();\n          return;\n        }\n\n        if (!socket._meteorSession) {\n          sendError('Must connect first', msg);\n          return;\n        }\n        socket._meteorSession.processMessage(msg);\n      } catch (e) {\n        // XXX print stack nicely\n        Meteor._debug(\"Internal exception while processing message\", msg, e.message, e.stack);\n      }\n    });\n\n    socket.on('close', function () {\n      if (socket._meteorSession) {\n        Fiber(function () {\n          socket._meteorSession.close();\n        }).run();\n      }\n    });\n  });\n};\n\n_.extend(Server.prototype, {\n\n  /**\n   * @summary Register a callback to be called when a new DDP connection is made to the server.\n   * @locus Server\n   * @param {function} callback The function to call when a new DDP connection is established.\n   * @memberOf Meteor\n   */\n  onConnection: function (fn) {\n    var self = this;\n    return self.onConnectionHook.register(fn);\n  },\n\n  _handleConnect: function (socket, msg) {\n    var self = this;\n\n    // The connect message must specify a version and an array of supported\n    // versions, and it must claim to support what it is proposing.\n    if (!(typeof msg.version === 'string' && _.isArray(msg.support) && _.all(msg.support, _.isString) && _.contains(msg.support, msg.version))) {\n      socket.send(DDPCommon.stringifyDDP({ msg: 'failed',\n        version: DDPCommon.SUPPORTED_DDP_VERSIONS[0] }));\n      socket.close();\n      return;\n    }\n\n    // In the future, handle session resumption: something like:\n    //  socket._meteorSession = self.sessions[msg.session]\n    var version = calculateVersion(msg.support, DDPCommon.SUPPORTED_DDP_VERSIONS);\n\n    if (msg.version !== version) {\n      // The best version to use (according to the client's stated preferences)\n      // is not the one the client is trying to use. Inform them about the best\n      // version to use.\n      socket.send(DDPCommon.stringifyDDP({ msg: 'failed', version: version }));\n      socket.close();\n      return;\n    }\n\n    // Yay, version matches! Create a new session.\n    // Note: Troposphere depends on the ability to mutate\n    // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.\n    socket._meteorSession = new Session(self, version, socket, self.options);\n    self.sessions[socket._meteorSession.id] = socket._meteorSession;\n    self.onConnectionHook.each(function (callback) {\n      if (socket._meteorSession) callback(socket._meteorSession.connectionHandle);\n      return true;\n    });\n  },\n  /**\n   * Register a publish handler function.\n   *\n   * @param name {String} identifier for query\n   * @param handler {Function} publish handler\n   * @param options {Object}\n   *\n   * Server will call handler function on each new subscription,\n   * either when receiving DDP sub message for a named subscription, or on\n   * DDP connect for a universal subscription.\n   *\n   * If name is null, this will be a subscription that is\n   * automatically established and permanently on for all connected\n   * client, instead of a subscription that can be turned on and off\n   * with subscribe().\n   *\n   * options to contain:\n   *  - (mostly internal) is_auto: true if generated automatically\n   *    from an autopublish hook. this is for cosmetic purposes only\n   *    (it lets us determine whether to print a warning suggesting\n   *    that you turn off autopublish.)\n   */\n\n  /**\n   * @summary Publish a record set.\n   * @memberOf Meteor\n   * @locus Server\n   * @param {String} name Name of the record set.  If `null`, the set has no name, and the record set is automatically sent to all connected clients.\n   * @param {Function} func Function called on the server each time a client subscribes.  Inside the function, `this` is the publish handler object, described below.  If the client passed arguments to `subscribe`, the function is called with the same arguments.\n   */\n  publish: function (name, handler, options) {\n    var self = this;\n\n    options = options || {};\n\n    if (name && name in self.publish_handlers) {\n      Meteor._debug(\"Ignoring duplicate publish named '\" + name + \"'\");\n      return;\n    }\n\n    if (Package.autopublish && !options.is_auto) {\n      // They have autopublish on, yet they're trying to manually\n      // picking stuff to publish. They probably should turn off\n      // autopublish. (This check isn't perfect -- if you create a\n      // publish before you turn on autopublish, it won't catch\n      // it. But this will definitely handle the simple case where\n      // you've added the autopublish package to your app, and are\n      // calling publish from your app code.)\n      if (!self.warned_about_autopublish) {\n        self.warned_about_autopublish = true;\n        Meteor._debug(\"** You've set up some data subscriptions with Meteor.publish(), but\\n\" + \"** you still have autopublish turned on. Because autopublish is still\\n\" + \"** on, your Meteor.publish() calls won't have much effect. All data\\n\" + \"** will still be sent to all clients.\\n\" + \"**\\n\" + \"** Turn off autopublish by removing the autopublish package:\\n\" + \"**\\n\" + \"**   $ meteor remove autopublish\\n\" + \"**\\n\" + \"** .. and make sure you have Meteor.publish() and Meteor.subscribe() calls\\n\" + \"** for each collection that you want clients to see.\\n\");\n      }\n    }\n\n    if (name) self.publish_handlers[name] = handler;else {\n      self.universal_publish_handlers.push(handler);\n      // Spin up the new publisher on any existing session too. Run each\n      // session's subscription in a new Fiber, so that there's no change for\n      // self.sessions to change while we're running this loop.\n      _.each(self.sessions, function (session) {\n        if (!session._dontStartNewUniversalSubs) {\n          Fiber(function () {\n            session._startSubscription(handler);\n          }).run();\n        }\n      });\n    }\n  },\n\n  _removeSession: function (session) {\n    var self = this;\n    if (self.sessions[session.id]) {\n      delete self.sessions[session.id];\n    }\n  },\n\n  /**\n   * @summary Defines functions that can be invoked over the network by clients.\n   * @locus Anywhere\n   * @param {Object} methods Dictionary whose keys are method names and values are functions.\n   * @memberOf Meteor\n   */\n  methods: function (methods) {\n    var self = this;\n    _.each(methods, function (func, name) {\n      if (typeof func !== 'function') throw new Error(\"Method '\" + name + \"' must be a function\");\n      if (self.method_handlers[name]) throw new Error(\"A method named '\" + name + \"' is already defined\");\n      self.method_handlers[name] = func;\n    });\n  },\n\n  call: function (name /*, arguments */) {\n    // if it's a function, the last argument is the result callback,\n    // not a parameter to the remote method.\n    var args = Array.prototype.slice.call(arguments, 1);\n    if (args.length && typeof args[args.length - 1] === \"function\") var callback = args.pop();\n    return this.apply(name, args, callback);\n  },\n\n  // @param options {Optional Object}\n  // @param callback {Optional Function}\n  apply: function (name, args, options, callback) {\n    var self = this;\n\n    // We were passed 3 arguments. They may be either (name, args, options)\n    // or (name, args, callback)\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    options = options || {};\n\n    if (callback)\n      // It's not really necessary to do this, since we immediately\n      // run the callback in this fiber before returning, but we do it\n      // anyway for regularity.\n      // XXX improve error message (and how we report it)\n      callback = Meteor.bindEnvironment(callback, \"delivering result of invoking '\" + name + \"'\");\n\n    // Run the handler\n    var handler = self.method_handlers[name];\n    var exception;\n    if (!handler) {\n      exception = new Meteor.Error(404, \"Method not found\");\n    } else {\n      // If this is a method call from within another method, get the\n      // user state from the outer method, otherwise don't allow\n      // setUserId to be called\n      var userId = null;\n      var setUserId = function () {\n        throw new Error(\"Can't call setUserId on a server initiated method call\");\n      };\n      var connection = null;\n      var currentInvocation = DDP._CurrentInvocation.get();\n      if (currentInvocation) {\n        userId = currentInvocation.userId;\n        setUserId = function (userId) {\n          currentInvocation.setUserId(userId);\n        };\n        connection = currentInvocation.connection;\n      }\n\n      var invocation = new DDPCommon.MethodInvocation({\n        isSimulation: false,\n        userId: userId,\n        setUserId: setUserId,\n        connection: connection,\n        randomSeed: DDPCommon.makeRpcSeed(currentInvocation, name)\n      });\n      try {\n        var result = DDP._CurrentInvocation.withValue(invocation, function () {\n          return maybeAuditArgumentChecks(handler, invocation, EJSON.clone(args), \"internal call to '\" + name + \"'\");\n        });\n        result = EJSON.clone(result);\n      } catch (e) {\n        exception = e;\n      }\n    }\n\n    // Return the result in whichever way the caller asked for it. Note that we\n    // do NOT block on the write fence in an analogous way to how the client\n    // blocks on the relevant data being visible, so you are NOT guaranteed that\n    // cursor observe callbacks have fired when your callback is invoked. (We\n    // can change this if there's a real use case.)\n    if (callback) {\n      callback(exception, result);\n      return undefined;\n    }\n    if (exception) throw exception;\n    return result;\n  },\n\n  _urlForSession: function (sessionId) {\n    var self = this;\n    var session = self.sessions[sessionId];\n    if (session) return session._socketUrl;else return null;\n  }\n});\n\nvar calculateVersion = function (clientSupportedVersions, serverSupportedVersions) {\n  var correctVersion = _.find(clientSupportedVersions, function (version) {\n    return _.contains(serverSupportedVersions, version);\n  });\n  if (!correctVersion) {\n    correctVersion = serverSupportedVersions[0];\n  }\n  return correctVersion;\n};\n\nDDPServer._calculateVersion = calculateVersion;\n\n// \"blind\" exceptions other than those that were deliberately thrown to signal\n// errors to the client\nvar wrapInternalException = function (exception, context) {\n  if (!exception || exception instanceof Meteor.Error) return exception;\n\n  // tests can set the 'expected' flag on an exception so it won't go to the\n  // server log\n  if (!exception.expected) {\n    Meteor._debug(\"Exception \" + context, exception.stack);\n    if (exception.sanitizedError) {\n      Meteor._debug(\"Sanitized and reported to the client as:\", exception.sanitizedError.message);\n      Meteor._debug();\n    }\n  }\n\n  // Did the error contain more details that could have been useful if caught in\n  // server code (or if thrown from non-client-originated code), but also\n  // provided a \"sanitized\" version with more context than 500 Internal server\n  // error? Use that.\n  if (exception.sanitizedError) {\n    if (exception.sanitizedError instanceof Meteor.Error) return exception.sanitizedError;\n    Meteor._debug(\"Exception \" + context + \" provides a sanitizedError that \" + \"is not a Meteor.Error; ignoring\");\n  }\n\n  return new Meteor.Error(500, \"Internal server error\");\n};\n\n// Audit argument checks, if the audit-argument-checks package exists (it is a\n// weak dependency of this package).\nvar maybeAuditArgumentChecks = function (f, context, args, description) {\n  args = args || [];\n  if (Package['audit-argument-checks']) {\n    return Match._failIfArgumentsAreNotAllChecked(f, context, args, description);\n  }\n  return f.apply(context, args);\n};","ast":null,"map":{"version":3,"sources":["/livedata_server.js"],"names":[],"mappings":"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","file":"/livedata_server.js.map","sourcesContent":["DDPServer = {};\n\nvar Fiber = Npm.require('fibers');\n\n// This file contains classes:\n// * Session - The server's connection to a single DDP client\n// * Subscription - A single subscription for a single client\n// * Server - An entire server that may talk to > 1 client. A DDP endpoint.\n//\n// Session and Subscription are file scope. For now, until we freeze\n// the interface, Server is package scope (in the future it should be\n// exported.)\n\n// Represents a single document in a SessionCollectionView\nvar SessionDocumentView = function () {\n  var self = this;\n  self.existsIn = {}; // set of subscriptionHandle\n  self.dataByKey = {}; // key-> [ {subscriptionHandle, value} by precedence]\n};\n\n_.extend(SessionDocumentView.prototype, {\n\n  getFields: function () {\n    var self = this;\n    var ret = {};\n    _.each(self.dataByKey, function (precedenceList, key) {\n      ret[key] = precedenceList[0].value;\n    });\n    return ret;\n  },\n\n  clearField: function (subscriptionHandle, key, changeCollector) {\n    var self = this;\n    // Publish API ignores _id if present in fields\n    if (key === \"_id\")\n      return;\n    var precedenceList = self.dataByKey[key];\n\n    // It's okay to clear fields that didn't exist. No need to throw\n    // an error.\n    if (!precedenceList)\n      return;\n\n    var removedValue = undefined;\n    for (var i = 0; i < precedenceList.length; i++) {\n      var precedence = precedenceList[i];\n      if (precedence.subscriptionHandle === subscriptionHandle) {\n        // The view's value can only change if this subscription is the one that\n        // used to have precedence.\n        if (i === 0)\n          removedValue = precedence.value;\n        precedenceList.splice(i, 1);\n        break;\n      }\n    }\n    if (_.isEmpty(precedenceList)) {\n      delete self.dataByKey[key];\n      changeCollector[key] = undefined;\n    } else if (removedValue !== undefined &&\n               !EJSON.equals(removedValue, precedenceList[0].value)) {\n      changeCollector[key] = precedenceList[0].value;\n    }\n  },\n\n  changeField: function (subscriptionHandle, key, value,\n                         changeCollector, isAdd) {\n    var self = this;\n    // Publish API ignores _id if present in fields\n    if (key === \"_id\")\n      return;\n\n    // Don't share state with the data passed in by the user.\n    value = EJSON.clone(value);\n\n    if (!_.has(self.dataByKey, key)) {\n      self.dataByKey[key] = [{subscriptionHandle: subscriptionHandle,\n                              value: value}];\n      changeCollector[key] = value;\n      return;\n    }\n    var precedenceList = self.dataByKey[key];\n    var elt;\n    if (!isAdd) {\n      elt = _.find(precedenceList, function (precedence) {\n        return precedence.subscriptionHandle === subscriptionHandle;\n      });\n    }\n\n    if (elt) {\n      if (elt === precedenceList[0] && !EJSON.equals(value, elt.value)) {\n        // this subscription is changing the value of this field.\n        changeCollector[key] = value;\n      }\n      elt.value = value;\n    } else {\n      // this subscription is newly caring about this field\n      precedenceList.push({subscriptionHandle: subscriptionHandle, value: value});\n    }\n\n  }\n});\n\n/**\n * Represents a client's view of a single collection\n * @param {String} collectionName Name of the collection it represents\n * @param {Object.<String, Function>} sessionCallbacks The callbacks for added, changed, removed\n * @class SessionCollectionView\n */\nvar SessionCollectionView = function (collectionName, sessionCallbacks) {\n  var self = this;\n  self.collectionName = collectionName;\n  self.documents = {};\n  self.callbacks = sessionCallbacks;\n};\n\nDDPServer._SessionCollectionView = SessionCollectionView;\n\n\n_.extend(SessionCollectionView.prototype, {\n\n  isEmpty: function () {\n    var self = this;\n    return _.isEmpty(self.documents);\n  },\n\n  diff: function (previous) {\n    var self = this;\n    DiffSequence.diffObjects(previous.documents, self.documents, {\n      both: _.bind(self.diffDocument, self),\n\n      rightOnly: function (id, nowDV) {\n        self.callbacks.added(self.collectionName, id, nowDV.getFields());\n      },\n\n      leftOnly: function (id, prevDV) {\n        self.callbacks.removed(self.collectionName, id);\n      }\n    });\n  },\n\n  diffDocument: function (id, prevDV, nowDV) {\n    var self = this;\n    var fields = {};\n    DiffSequence.diffObjects(prevDV.getFields(), nowDV.getFields(), {\n      both: function (key, prev, now) {\n        if (!EJSON.equals(prev, now))\n          fields[key] = now;\n      },\n      rightOnly: function (key, now) {\n        fields[key] = now;\n      },\n      leftOnly: function(key, prev) {\n        fields[key] = undefined;\n      }\n    });\n    self.callbacks.changed(self.collectionName, id, fields);\n  },\n\n  added: function (subscriptionHandle, id, fields) {\n    var self = this;\n    var docView = self.documents[id];\n    var added = false;\n    if (!docView) {\n      added = true;\n      docView = new SessionDocumentView();\n      self.documents[id] = docView;\n    }\n    docView.existsIn[subscriptionHandle] = true;\n    var changeCollector = {};\n    _.each(fields, function (value, key) {\n      docView.changeField(\n        subscriptionHandle, key, value, changeCollector, true);\n    });\n    if (added)\n      self.callbacks.added(self.collectionName, id, changeCollector);\n    else\n      self.callbacks.changed(self.collectionName, id, changeCollector);\n  },\n\n  changed: function (subscriptionHandle, id, changed) {\n    var self = this;\n    var changedResult = {};\n    var docView = self.documents[id];\n    if (!docView)\n      throw new Error(\"Could not find element with id \" + id + \" to change\");\n    _.each(changed, function (value, key) {\n      if (value === undefined)\n        docView.clearField(subscriptionHandle, key, changedResult);\n      else\n        docView.changeField(subscriptionHandle, key, value, changedResult);\n    });\n    self.callbacks.changed(self.collectionName, id, changedResult);\n  },\n\n  removed: function (subscriptionHandle, id) {\n    var self = this;\n    var docView = self.documents[id];\n    if (!docView) {\n      var err = new Error(\"Removed nonexistent document \" + id);\n      throw err;\n    }\n    delete docView.existsIn[subscriptionHandle];\n    if (_.isEmpty(docView.existsIn)) {\n      // it is gone from everyone\n      self.callbacks.removed(self.collectionName, id);\n      delete self.documents[id];\n    } else {\n      var changed = {};\n      // remove this subscription from every precedence list\n      // and record the changes\n      _.each(docView.dataByKey, function (precedenceList, key) {\n        docView.clearField(subscriptionHandle, key, changed);\n      });\n\n      self.callbacks.changed(self.collectionName, id, changed);\n    }\n  }\n});\n\n/******************************************************************************/\n/* Session                                                                    */\n/******************************************************************************/\n\nvar Session = function (server, version, socket, options) {\n  var self = this;\n  self.id = Random.id();\n\n  self.server = server;\n  self.version = version;\n\n  self.initialized = false;\n  self.socket = socket;\n\n  // set to null when the session is destroyed. multiple places below\n  // use this to determine if the session is alive or not.\n  self.inQueue = new Meteor._DoubleEndedQueue();\n\n  self.blocked = false;\n  self.workerRunning = false;\n\n  // Sub objects for active subscriptions\n  self._namedSubs = {};\n  self._universalSubs = [];\n\n  self.userId = null;\n\n  self.collectionViews = {};\n\n  // Set this to false to not send messages when collectionViews are\n  // modified. This is done when rerunning subs in _setUserId and those messages\n  // are calculated via a diff instead.\n  self._isSending = true;\n\n  // If this is true, don't start a newly-created universal publisher on this\n  // session. The session will take care of starting it when appropriate.\n  self._dontStartNewUniversalSubs = false;\n\n  // when we are rerunning subscriptions, any ready messages\n  // we want to buffer up for when we are done rerunning subscriptions\n  self._pendingReady = [];\n\n  // List of callbacks to call when this connection is closed.\n  self._closeCallbacks = [];\n\n\n  // XXX HACK: If a sockjs connection, save off the URL. This is\n  // temporary and will go away in the near future.\n  self._socketUrl = socket.url;\n\n  // Allow tests to disable responding to pings.\n  self._respondToPings = options.respondToPings;\n\n  // This object is the public interface to the session. In the public\n  // API, it is called the `connection` object.  Internally we call it\n  // a `connectionHandle` to avoid ambiguity.\n  self.connectionHandle = {\n    id: self.id,\n    close: function () {\n      self.close();\n    },\n    onClose: function (fn) {\n      var cb = Meteor.bindEnvironment(fn, \"connection onClose callback\");\n      if (self.inQueue) {\n        self._closeCallbacks.push(cb);\n      } else {\n        // if we're already closed, call the callback.\n        Meteor.defer(cb);\n      }\n    },\n    clientAddress: self._clientAddress(),\n    httpHeaders: self.socket.headers\n  };\n\n  socket.send(DDPCommon.stringifyDDP({msg: 'connected',\n                            session: self.id}));\n  // On initial connect, spin up all the universal publishers.\n  Fiber(function () {\n    self.startUniversalSubs();\n  }).run();\n\n  if (version !== 'pre1' && options.heartbeatInterval !== 0) {\n    self.heartbeat = new DDPCommon.Heartbeat({\n      heartbeatInterval: options.heartbeatInterval,\n      heartbeatTimeout: options.heartbeatTimeout,\n      onTimeout: function () {\n        self.close();\n      },\n      sendPing: function () {\n        self.send({msg: 'ping'});\n      }\n    });\n    self.heartbeat.start();\n  }\n\n  Package.facts && Package.facts.Facts.incrementServerFact(\n    \"livedata\", \"sessions\", 1);\n};\n\n_.extend(Session.prototype, {\n\n  sendReady: function (subscriptionIds) {\n    var self = this;\n    if (self._isSending)\n      self.send({msg: \"ready\", subs: subscriptionIds});\n    else {\n      _.each(subscriptionIds, function (subscriptionId) {\n        self._pendingReady.push(subscriptionId);\n      });\n    }\n  },\n\n  sendAdded: function (collectionName, id, fields) {\n    var self = this;\n    if (self._isSending)\n      self.send({msg: \"added\", collection: collectionName, id: id, fields: fields});\n  },\n\n  sendChanged: function (collectionName, id, fields) {\n    var self = this;\n    if (_.isEmpty(fields))\n      return;\n\n    if (self._isSending) {\n      self.send({\n        msg: \"changed\",\n        collection: collectionName,\n        id: id,\n        fields: fields\n      });\n    }\n  },\n\n  sendRemoved: function (collectionName, id) {\n    var self = this;\n    if (self._isSending)\n      self.send({msg: \"removed\", collection: collectionName, id: id});\n  },\n\n  getSendCallbacks: function () {\n    var self = this;\n    return {\n      added: _.bind(self.sendAdded, self),\n      changed: _.bind(self.sendChanged, self),\n      removed: _.bind(self.sendRemoved, self)\n    };\n  },\n\n  getCollectionView: function (collectionName) {\n    var self = this;\n    if (_.has(self.collectionViews, collectionName)) {\n      return self.collectionViews[collectionName];\n    }\n    var ret = new SessionCollectionView(collectionName,\n                                        self.getSendCallbacks());\n    self.collectionViews[collectionName] = ret;\n    return ret;\n  },\n\n  added: function (subscriptionHandle, collectionName, id, fields) {\n    var self = this;\n    var view = self.getCollectionView(collectionName);\n    view.added(subscriptionHandle, id, fields);\n  },\n\n  removed: function (subscriptionHandle, collectionName, id) {\n    var self = this;\n    var view = self.getCollectionView(collectionName);\n    view.removed(subscriptionHandle, id);\n    if (view.isEmpty()) {\n      delete self.collectionViews[collectionName];\n    }\n  },\n\n  changed: function (subscriptionHandle, collectionName, id, fields) {\n    var self = this;\n    var view = self.getCollectionView(collectionName);\n    view.changed(subscriptionHandle, id, fields);\n  },\n\n  startUniversalSubs: function () {\n    var self = this;\n    // Make a shallow copy of the set of universal handlers and start them. If\n    // additional universal publishers start while we're running them (due to\n    // yielding), they will run separately as part of Server.publish.\n    var handlers = _.clone(self.server.universal_publish_handlers);\n    _.each(handlers, function (handler) {\n      self._startSubscription(handler);\n    });\n  },\n\n  // Destroy this session and unregister it at the server.\n  close: function () {\n    var self = this;\n\n    // Destroy this session, even if it's not registered at the\n    // server. Stop all processing and tear everything down. If a socket\n    // was attached, close it.\n\n    // Already destroyed.\n    if (! self.inQueue)\n      return;\n\n    // Drop the merge box data immediately.\n    self.inQueue = null;\n    self.collectionViews = {};\n\n    if (self.heartbeat) {\n      self.heartbeat.stop();\n      self.heartbeat = null;\n    }\n\n    if (self.socket) {\n      self.socket.close();\n      self.socket._meteorSession = null;\n    }\n\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"livedata\", \"sessions\", -1);\n\n    Meteor.defer(function () {\n      // stop callbacks can yield, so we defer this on close.\n      // sub._isDeactivated() detects that we set inQueue to null and\n      // treats it as semi-deactivated (it will ignore incoming callbacks, etc).\n      self._deactivateAllSubscriptions();\n\n      // Defer calling the close callbacks, so that the caller closing\n      // the session isn't waiting for all the callbacks to complete.\n      _.each(self._closeCallbacks, function (callback) {\n        callback();\n      });\n    });\n\n    // Unregister the session.\n    self.server._removeSession(self);\n  },\n\n  // Send a message (doing nothing if no socket is connected right now.)\n  // It should be a JSON object (it will be stringified.)\n  send: function (msg) {\n    var self = this;\n    if (self.socket) {\n      if (Meteor._printSentDDP)\n        Meteor._debug(\"Sent DDP\", DDPCommon.stringifyDDP(msg));\n      self.socket.send(DDPCommon.stringifyDDP(msg));\n    }\n  },\n\n  // Send a connection error.\n  sendError: function (reason, offendingMessage) {\n    var self = this;\n    var msg = {msg: 'error', reason: reason};\n    if (offendingMessage)\n      msg.offendingMessage = offendingMessage;\n    self.send(msg);\n  },\n\n  // Process 'msg' as an incoming message. (But as a guard against\n  // race conditions during reconnection, ignore the message if\n  // 'socket' is not the currently connected socket.)\n  //\n  // We run the messages from the client one at a time, in the order\n  // given by the client. The message handler is passed an idempotent\n  // function 'unblock' which it may call to allow other messages to\n  // begin running in parallel in another fiber (for example, a method\n  // that wants to yield.) Otherwise, it is automatically unblocked\n  // when it returns.\n  //\n  // Actually, we don't have to 'totally order' the messages in this\n  // way, but it's the easiest thing that's correct. (unsub needs to\n  // be ordered against sub, methods need to be ordered against each\n  // other.)\n  processMessage: function (msg_in) {\n    var self = this;\n    if (!self.inQueue) // we have been destroyed.\n      return;\n\n    // Respond to ping and pong messages immediately without queuing.\n    // If the negotiated DDP version is \"pre1\" which didn't support\n    // pings, preserve the \"pre1\" behavior of responding with a \"bad\n    // request\" for the unknown messages.\n    //\n    // Fibers are needed because heartbeat uses Meteor.setTimeout, which\n    // needs a Fiber. We could actually use regular setTimeout and avoid\n    // these new fibers, but it is easier to just make everything use\n    // Meteor.setTimeout and not think too hard.\n    //\n    // Any message counts as receiving a pong, as it demonstrates that\n    // the client is still alive.\n    if (self.heartbeat) {\n      Fiber(function () {\n        self.heartbeat.messageReceived();\n      }).run();\n    }\n\n    if (self.version !== 'pre1' && msg_in.msg === 'ping') {\n      if (self._respondToPings)\n        self.send({msg: \"pong\", id: msg_in.id});\n      return;\n    }\n    if (self.version !== 'pre1' && msg_in.msg === 'pong') {\n      // Since everything is a pong, nothing to do\n      return;\n    }\n\n    self.inQueue.push(msg_in);\n    if (self.workerRunning)\n      return;\n    self.workerRunning = true;\n\n    var processNext = function () {\n      var msg = self.inQueue && self.inQueue.shift();\n      if (!msg) {\n        self.workerRunning = false;\n        return;\n      }\n\n      Fiber(function () {\n        var blocked = true;\n\n        var unblock = function () {\n          if (!blocked)\n            return; // idempotent\n          blocked = false;\n          processNext();\n        };\n\n        if (_.has(self.protocol_handlers, msg.msg))\n          self.protocol_handlers[msg.msg].call(self, msg, unblock);\n        else\n          self.sendError('Bad request', msg);\n        unblock(); // in case the handler didn't already do it\n      }).run();\n    };\n\n    processNext();\n  },\n\n  protocol_handlers: {\n    sub: function (msg) {\n      var self = this;\n\n      // reject malformed messages\n      if (typeof (msg.id) !== \"string\" ||\n          typeof (msg.name) !== \"string\" ||\n          (('params' in msg) && !(msg.params instanceof Array))) {\n        self.sendError(\"Malformed subscription\", msg);\n        return;\n      }\n\n      if (!self.server.publish_handlers[msg.name]) {\n        self.send({\n          msg: 'nosub', id: msg.id,\n          error: new Meteor.Error(404, \"Subscription not found\")});\n        return;\n      }\n\n      if (_.has(self._namedSubs, msg.id))\n        // subs are idempotent, or rather, they are ignored if a sub\n        // with that id already exists. this is important during\n        // reconnect.\n        return;\n\n      // XXX It'd be much better if we had generic hooks where any package can\n      // hook into subscription handling, but in the mean while we special case\n      // ddp-rate-limiter package. This is also done for weak requirements to\n      // add the ddp-rate-limiter package in case we don't have Accounts. A\n      // user trying to use the ddp-rate-limiter must explicitly require it.\n      if (Package['ddp-rate-limiter']) {\n        var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\n        var rateLimiterInput = {\n          userId: self.userId,\n          clientAddress: self.connectionHandle.clientAddress,\n          type: \"subscription\",\n          name: msg.name,\n          connectionId: self.id\n        };\n\n        DDPRateLimiter._increment(rateLimiterInput);\n        var rateLimitResult = DDPRateLimiter._check(rateLimiterInput);\n        if (!rateLimitResult.allowed) {\n          self.send({\n            msg: 'nosub', id: msg.id,\n            error: new Meteor.Error(\n              'too-many-requests',\n              DDPRateLimiter.getErrorMessage(rateLimitResult),\n              {timeToReset: rateLimitResult.timeToReset})\n          });\n          return;\n        }\n      }\n\n      var handler = self.server.publish_handlers[msg.name];\n\n      self._startSubscription(handler, msg.id, msg.params, msg.name);\n\n    },\n\n    unsub: function (msg) {\n      var self = this;\n\n      self._stopSubscription(msg.id);\n    },\n\n    method: function (msg, unblock) {\n      var self = this;\n\n      // reject malformed messages\n      // For now, we silently ignore unknown attributes,\n      // for forwards compatibility.\n      if (typeof (msg.id) !== \"string\" ||\n          typeof (msg.method) !== \"string\" ||\n          (('params' in msg) && !(msg.params instanceof Array)) ||\n          (('randomSeed' in msg) && (typeof msg.randomSeed !== \"string\"))) {\n        self.sendError(\"Malformed method invocation\", msg);\n        return;\n      }\n\n      var randomSeed = msg.randomSeed || null;\n\n      // set up to mark the method as satisfied once all observers\n      // (and subscriptions) have reacted to any writes that were\n      // done.\n      var fence = new DDPServer._WriteFence;\n      fence.onAllCommitted(function () {\n        // Retire the fence so that future writes are allowed.\n        // This means that callbacks like timers are free to use\n        // the fence, and if they fire before it's armed (for\n        // example, because the method waits for them) their\n        // writes will be included in the fence.\n        fence.retire();\n        self.send({\n          msg: 'updated', methods: [msg.id]});\n      });\n\n      // find the handler\n      var handler = self.server.method_handlers[msg.method];\n      if (!handler) {\n        self.send({\n          msg: 'result', id: msg.id,\n          error: new Meteor.Error(404, \"Method not found\")});\n        fence.arm();\n        return;\n      }\n\n      var setUserId = function(userId) {\n        self._setUserId(userId);\n      };\n\n      var invocation = new DDPCommon.MethodInvocation({\n        isSimulation: false,\n        userId: self.userId,\n        setUserId: setUserId,\n        unblock: unblock,\n        connection: self.connectionHandle,\n        randomSeed: randomSeed\n      });\n\n      const promise = new Promise((resolve, reject) => {\n        // XXX It'd be better if we could hook into method handlers better but\n        // for now, we need to check if the ddp-rate-limiter exists since we\n        // have a weak requirement for the ddp-rate-limiter package to be added\n        // to our application.\n        if (Package['ddp-rate-limiter']) {\n          var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\n          var rateLimiterInput = {\n            userId: self.userId,\n            clientAddress: self.connectionHandle.clientAddress,\n            type: \"method\",\n            name: msg.method,\n            connectionId: self.id\n          };\n          DDPRateLimiter._increment(rateLimiterInput);\n          var rateLimitResult = DDPRateLimiter._check(rateLimiterInput)\n          if (!rateLimitResult.allowed) {\n            reject(new Meteor.Error(\n              \"too-many-requests\",\n              DDPRateLimiter.getErrorMessage(rateLimitResult),\n              {timeToReset: rateLimitResult.timeToReset}\n            ));\n            return;\n          }\n        }\n\n        resolve(DDPServer._CurrentWriteFence.withValue(\n          fence,\n          () => DDP._CurrentInvocation.withValue(\n            invocation,\n            () => maybeAuditArgumentChecks(\n              handler, invocation, msg.params,\n              \"call to '\" + msg.method + \"'\"\n            )\n          )\n        ));\n      });\n\n      function finish() {\n        fence.arm();\n        unblock();\n      }\n\n      const payload = {\n        msg: \"result\",\n        id: msg.id\n      };\n\n      promise.then((result) => {\n        finish();\n        if (result !== undefined) {\n          payload.result = result;\n        }\n        self.send(payload);\n      }, (exception) => {\n        finish();\n        payload.error = wrapInternalException(\n          exception,\n          `while invoking method '${msg.method}'`\n        );\n        self.send(payload);\n      });\n    }\n  },\n\n  _eachSub: function (f) {\n    var self = this;\n    _.each(self._namedSubs, f);\n    _.each(self._universalSubs, f);\n  },\n\n  _diffCollectionViews: function (beforeCVs) {\n    var self = this;\n    DiffSequence.diffObjects(beforeCVs, self.collectionViews, {\n      both: function (collectionName, leftValue, rightValue) {\n        rightValue.diff(leftValue);\n      },\n      rightOnly: function (collectionName, rightValue) {\n        _.each(rightValue.documents, function (docView, id) {\n          self.sendAdded(collectionName, id, docView.getFields());\n        });\n      },\n      leftOnly: function (collectionName, leftValue) {\n        _.each(leftValue.documents, function (doc, id) {\n          self.sendRemoved(collectionName, id);\n        });\n      }\n    });\n  },\n\n  // Sets the current user id in all appropriate contexts and reruns\n  // all subscriptions\n  _setUserId: function(userId) {\n    var self = this;\n\n    if (userId !== null && typeof userId !== \"string\")\n      throw new Error(\"setUserId must be called on string or null, not \" +\n                      typeof userId);\n\n    // Prevent newly-created universal subscriptions from being added to our\n    // session; they will be found below when we call startUniversalSubs.\n    //\n    // (We don't have to worry about named subscriptions, because we only add\n    // them when we process a 'sub' message. We are currently processing a\n    // 'method' message, and the method did not unblock, because it is illegal\n    // to call setUserId after unblock. Thus we cannot be concurrently adding a\n    // new named subscription.)\n    self._dontStartNewUniversalSubs = true;\n\n    // Prevent current subs from updating our collectionViews and call their\n    // stop callbacks. This may yield.\n    self._eachSub(function (sub) {\n      sub._deactivate();\n    });\n\n    // All subs should now be deactivated. Stop sending messages to the client,\n    // save the state of the published collections, reset to an empty view, and\n    // update the userId.\n    self._isSending = false;\n    var beforeCVs = self.collectionViews;\n    self.collectionViews = {};\n    self.userId = userId;\n\n    // Save the old named subs, and reset to having no subscriptions.\n    var oldNamedSubs = self._namedSubs;\n    self._namedSubs = {};\n    self._universalSubs = [];\n\n    _.each(oldNamedSubs, function (sub, subscriptionId) {\n      self._namedSubs[subscriptionId] = sub._recreate();\n      // nb: if the handler throws or calls this.error(), it will in fact\n      // immediately send its 'nosub'. This is OK, though.\n      self._namedSubs[subscriptionId]._runHandler();\n    });\n\n    // Allow newly-created universal subs to be started on our connection in\n    // parallel with the ones we're spinning up here, and spin up universal\n    // subs.\n    self._dontStartNewUniversalSubs = false;\n    self.startUniversalSubs();\n\n    // Start sending messages again, beginning with the diff from the previous\n    // state of the world to the current state. No yields are allowed during\n    // this diff, so that other changes cannot interleave.\n    Meteor._noYieldsAllowed(function () {\n      self._isSending = true;\n      self._diffCollectionViews(beforeCVs);\n      if (!_.isEmpty(self._pendingReady)) {\n        self.sendReady(self._pendingReady);\n        self._pendingReady = [];\n      }\n    });\n  },\n\n  _startSubscription: function (handler, subId, params, name) {\n    var self = this;\n\n    var sub = new Subscription(\n      self, handler, subId, params, name);\n    if (subId)\n      self._namedSubs[subId] = sub;\n    else\n      self._universalSubs.push(sub);\n\n    sub._runHandler();\n  },\n\n  // tear down specified subscription\n  _stopSubscription: function (subId, error) {\n    var self = this;\n\n    var subName = null;\n\n    if (subId && self._namedSubs[subId]) {\n      subName = self._namedSubs[subId]._name;\n      self._namedSubs[subId]._removeAllDocuments();\n      self._namedSubs[subId]._deactivate();\n      delete self._namedSubs[subId];\n    }\n\n    var response = {msg: 'nosub', id: subId};\n\n    if (error) {\n      response.error = wrapInternalException(\n        error,\n        subName ? (\"from sub \" + subName + \" id \" + subId)\n          : (\"from sub id \" + subId));\n    }\n\n    self.send(response);\n  },\n\n  // tear down all subscriptions. Note that this does NOT send removed or nosub\n  // messages, since we assume the client is gone.\n  _deactivateAllSubscriptions: function () {\n    var self = this;\n\n    _.each(self._namedSubs, function (sub, id) {\n      sub._deactivate();\n    });\n    self._namedSubs = {};\n\n    _.each(self._universalSubs, function (sub) {\n      sub._deactivate();\n    });\n    self._universalSubs = [];\n  },\n\n  // Determine the remote client's IP address, based on the\n  // HTTP_FORWARDED_COUNT environment variable representing how many\n  // proxies the server is behind.\n  _clientAddress: function () {\n    var self = this;\n\n    // For the reported client address for a connection to be correct,\n    // the developer must set the HTTP_FORWARDED_COUNT environment\n    // variable to an integer representing the number of hops they\n    // expect in the `x-forwarded-for` header. E.g., set to \"1\" if the\n    // server is behind one proxy.\n    //\n    // This could be computed once at startup instead of every time.\n    var httpForwardedCount = parseInt(process.env['HTTP_FORWARDED_COUNT']) || 0;\n\n    if (httpForwardedCount === 0)\n      return self.socket.remoteAddress;\n\n    var forwardedFor = self.socket.headers[\"x-forwarded-for\"];\n    if (! _.isString(forwardedFor))\n      return null;\n    forwardedFor = forwardedFor.trim().split(/\\s*,\\s*/);\n\n    // Typically the first value in the `x-forwarded-for` header is\n    // the original IP address of the client connecting to the first\n    // proxy.  However, the end user can easily spoof the header, in\n    // which case the first value(s) will be the fake IP address from\n    // the user pretending to be a proxy reporting the original IP\n    // address value.  By counting HTTP_FORWARDED_COUNT back from the\n    // end of the list, we ensure that we get the IP address being\n    // reported by *our* first proxy.\n\n    if (httpForwardedCount < 0 || httpForwardedCount > forwardedFor.length)\n      return null;\n\n    return forwardedFor[forwardedFor.length - httpForwardedCount];\n  }\n});\n\n/******************************************************************************/\n/* Subscription                                                               */\n/******************************************************************************/\n\n// ctor for a sub handle: the input to each publish function\n\n// Instance name is this because it's usually referred to as this inside a\n// publish\n/**\n * @summary The server's side of a subscription\n * @class Subscription\n * @instanceName this\n */\nvar Subscription = function (\n    session, handler, subscriptionId, params, name) {\n  var self = this;\n  self._session = session; // type is Session\n\n  /**\n   * @summary Access inside the publish function. The incoming [connection](#meteor_onconnection) for this subscription.\n   * @locus Server\n   * @name  connection\n   * @memberOf Subscription\n   * @instance\n   */\n  self.connection = session.connectionHandle; // public API object\n\n  self._handler = handler;\n\n  // my subscription ID (generated by client, undefined for universal subs).\n  self._subscriptionId = subscriptionId;\n  // undefined for universal subs\n  self._name = name;\n\n  self._params = params || [];\n\n  // Only named subscriptions have IDs, but we need some sort of string\n  // internally to keep track of all subscriptions inside\n  // SessionDocumentViews. We use this subscriptionHandle for that.\n  if (self._subscriptionId) {\n    self._subscriptionHandle = 'N' + self._subscriptionId;\n  } else {\n    self._subscriptionHandle = 'U' + Random.id();\n  }\n\n  // has _deactivate been called?\n  self._deactivated = false;\n\n  // stop callbacks to g/c this sub.  called w/ zero arguments.\n  self._stopCallbacks = [];\n\n  // the set of (collection, documentid) that this subscription has\n  // an opinion about\n  self._documents = {};\n\n  // remember if we are ready.\n  self._ready = false;\n\n  // Part of the public API: the user of this sub.\n\n  /**\n   * @summary Access inside the publish function. The id of the logged-in user, or `null` if no user is logged in.\n   * @locus Server\n   * @memberOf Subscription\n   * @name  userId\n   * @instance\n   */\n  self.userId = session.userId;\n\n  // For now, the id filter is going to default to\n  // the to/from DDP methods on MongoID, to\n  // specifically deal with mongo/minimongo ObjectIds.\n\n  // Later, you will be able to make this be \"raw\"\n  // if you want to publish a collection that you know\n  // just has strings for keys and no funny business, to\n  // a ddp consumer that isn't minimongo\n\n  self._idFilter = {\n    idStringify: MongoID.idStringify,\n    idParse: MongoID.idParse\n  };\n\n  Package.facts && Package.facts.Facts.incrementServerFact(\n    \"livedata\", \"subscriptions\", 1);\n};\n\n_.extend(Subscription.prototype, {\n  _runHandler: function () {\n    // XXX should we unblock() here? Either before running the publish\n    // function, or before running _publishCursor.\n    //\n    // Right now, each publish function blocks all future publishes and\n    // methods waiting on data from Mongo (or whatever else the function\n    // blocks on). This probably slows page load in common cases.\n\n    var self = this;\n    try {\n      var res = maybeAuditArgumentChecks(\n        self._handler, self, EJSON.clone(self._params),\n        // It's OK that this would look weird for universal subscriptions,\n        // because they have no arguments so there can never be an\n        // audit-argument-checks failure.\n        \"publisher '\" + self._name + \"'\");\n    } catch (e) {\n      self.error(e);\n      return;\n    }\n\n    // Did the handler call this.error or this.stop?\n    if (self._isDeactivated())\n      return;\n\n    self._publishHandlerResult(res);\n  },\n\n  _publishHandlerResult: function (res) {\n    // SPECIAL CASE: Instead of writing their own callbacks that invoke\n    // this.added/changed/ready/etc, the user can just return a collection\n    // cursor or array of cursors from the publish function; we call their\n    // _publishCursor method which starts observing the cursor and publishes the\n    // results. Note that _publishCursor does NOT call ready().\n    //\n    // XXX This uses an undocumented interface which only the Mongo cursor\n    // interface publishes. Should we make this interface public and encourage\n    // users to implement it themselves? Arguably, it's unnecessary; users can\n    // already write their own functions like\n    //   var publishMyReactiveThingy = function (name, handler) {\n    //     Meteor.publish(name, function () {\n    //       var reactiveThingy = handler();\n    //       reactiveThingy.publishMe();\n    //     });\n    //   };\n\n    var self = this;\n    var isCursor = function (c) {\n      return c && c._publishCursor;\n    };\n    if (isCursor(res)) {\n      try {\n        res._publishCursor(self);\n      } catch (e) {\n        self.error(e);\n        return;\n      }\n      // _publishCursor only returns after the initial added callbacks have run.\n      // mark subscription as ready.\n      self.ready();\n    } else if (_.isArray(res)) {\n      // check all the elements are cursors\n      if (! _.all(res, isCursor)) {\n        self.error(new Error(\"Publish function returned an array of non-Cursors\"));\n        return;\n      }\n      // find duplicate collection names\n      // XXX we should support overlapping cursors, but that would require the\n      // merge box to allow overlap within a subscription\n      var collectionNames = {};\n      for (var i = 0; i < res.length; ++i) {\n        var collectionName = res[i]._getCollectionName();\n        if (_.has(collectionNames, collectionName)) {\n          self.error(new Error(\n            \"Publish function returned multiple cursors for collection \" +\n              collectionName));\n          return;\n        }\n        collectionNames[collectionName] = true;\n      };\n\n      try {\n        _.each(res, function (cur) {\n          cur._publishCursor(self);\n        });\n      } catch (e) {\n        self.error(e);\n        return;\n      }\n      self.ready();\n    } else if (res) {\n      // truthy values other than cursors or arrays are probably a\n      // user mistake (possible returning a Mongo document via, say,\n      // `coll.findOne()`).\n      self.error(new Error(\"Publish function can only return a Cursor or \"\n                           + \"an array of Cursors\"));\n    }\n  },\n\n  // This calls all stop callbacks and prevents the handler from updating any\n  // SessionCollectionViews further. It's used when the user unsubscribes or\n  // disconnects, as well as during setUserId re-runs. It does *NOT* send\n  // removed messages for the published objects; if that is necessary, call\n  // _removeAllDocuments first.\n  _deactivate: function() {\n    var self = this;\n    if (self._deactivated)\n      return;\n    self._deactivated = true;\n    self._callStopCallbacks();\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"livedata\", \"subscriptions\", -1);\n  },\n\n  _callStopCallbacks: function () {\n    var self = this;\n    // tell listeners, so they can clean up\n    var callbacks = self._stopCallbacks;\n    self._stopCallbacks = [];\n    _.each(callbacks, function (callback) {\n      callback();\n    });\n  },\n\n  // Send remove messages for every document.\n  _removeAllDocuments: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      _.each(self._documents, function(collectionDocs, collectionName) {\n        // Iterate over _.keys instead of the dictionary itself, since we'll be\n        // mutating it.\n        _.each(_.keys(collectionDocs), function (strId) {\n          self.removed(collectionName, self._idFilter.idParse(strId));\n        });\n      });\n    });\n  },\n\n  // Returns a new Subscription for the same session with the same\n  // initial creation parameters. This isn't a clone: it doesn't have\n  // the same _documents cache, stopped state or callbacks; may have a\n  // different _subscriptionHandle, and gets its userId from the\n  // session, not from this object.\n  _recreate: function () {\n    var self = this;\n    return new Subscription(\n      self._session, self._handler, self._subscriptionId, self._params,\n      self._name);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Stops this client's subscription, triggering a call on the client to the `onStop` callback passed to [`Meteor.subscribe`](#meteor_subscribe), if any. If `error` is not a [`Meteor.Error`](#meteor_error), it will be [sanitized](#meteor_error).\n   * @locus Server\n   * @param {Error} error The error to pass to the client.\n   * @instance\n   * @memberOf Subscription\n   */\n  error: function (error) {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    self._session._stopSubscription(self._subscriptionId, error);\n  },\n\n  // Note that while our DDP client will notice that you've called stop() on the\n  // server (and clean up its _subscriptions table) we don't actually provide a\n  // mechanism for an app to notice this (the subscribe onError callback only\n  // triggers if there is an error).\n\n  /**\n   * @summary Call inside the publish function.  Stops this client's subscription and invokes the client's `onStop` callback with no error.\n   * @locus Server\n   * @instance\n   * @memberOf Subscription\n   */\n  stop: function () {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    self._session._stopSubscription(self._subscriptionId);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Registers a callback function to run when the subscription is stopped.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {Function} func The callback function\n   */\n  onStop: function (callback) {\n    var self = this;\n    if (self._isDeactivated())\n      callback();\n    else\n      self._stopCallbacks.push(callback);\n  },\n\n  // This returns true if the sub has been deactivated, *OR* if the session was\n  // destroyed but the deferred call to _deactivateAllSubscriptions hasn't\n  // happened yet.\n  _isDeactivated: function () {\n    var self = this;\n    return self._deactivated || self._session.inQueue === null;\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document has been added to the record set.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that contains the new document.\n   * @param {String} id The new document's ID.\n   * @param {Object} fields The fields in the new document.  If `_id` is present it is ignored.\n   */\n  added: function (collectionName, id, fields) {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    id = self._idFilter.idStringify(id);\n    Meteor._ensure(self._documents, collectionName)[id] = true;\n    self._session.added(self._subscriptionHandle, collectionName, id, fields);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document in the record set has been modified.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that contains the changed document.\n   * @param {String} id The changed document's ID.\n   * @param {Object} fields The fields in the document that have changed, together with their new values.  If a field is not present in `fields` it was left unchanged; if it is present in `fields` and has a value of `undefined` it was removed from the document.  If `_id` is present it is ignored.\n   */\n  changed: function (collectionName, id, fields) {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    id = self._idFilter.idStringify(id);\n    self._session.changed(self._subscriptionHandle, collectionName, id, fields);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document has been removed from the record set.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that the document has been removed from.\n   * @param {String} id The ID of the document that has been removed.\n   */\n  removed: function (collectionName, id) {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    id = self._idFilter.idStringify(id);\n    // We don't bother to delete sets of things in a collection if the\n    // collection is empty.  It could break _removeAllDocuments.\n    delete self._documents[collectionName][id];\n    self._session.removed(self._subscriptionHandle, collectionName, id);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that an initial, complete snapshot of the record set has been sent.  This will trigger a call on the client to the `onReady` callback passed to  [`Meteor.subscribe`](#meteor_subscribe), if any.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   */\n  ready: function () {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    if (!self._subscriptionId)\n      return;  // unnecessary but ignored for universal sub\n    if (!self._ready) {\n      self._session.sendReady([self._subscriptionId]);\n      self._ready = true;\n    }\n  }\n});\n\n/******************************************************************************/\n/* Server                                                                     */\n/******************************************************************************/\n\nServer = function (options) {\n  var self = this;\n\n  // The default heartbeat interval is 30 seconds on the server and 35\n  // seconds on the client.  Since the client doesn't need to send a\n  // ping as long as it is receiving pings, this means that pings\n  // normally go from the server to the client.\n  //\n  // Note: Troposphere depends on the ability to mutate\n  // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.\n  self.options = _.defaults(options || {}, {\n    heartbeatInterval: 15000,\n    heartbeatTimeout: 15000,\n    // For testing, allow responding to pings to be disabled.\n    respondToPings: true\n  });\n\n  // Map of callbacks to call when a new connection comes in to the\n  // server and completes DDP version negotiation. Use an object instead\n  // of an array so we can safely remove one from the list while\n  // iterating over it.\n  self.onConnectionHook = new Hook({\n    debugPrintExceptions: \"onConnection callback\"\n  });\n\n  self.publish_handlers = {};\n  self.universal_publish_handlers = [];\n\n  self.method_handlers = {};\n\n  self.sessions = {}; // map from id to session\n\n  self.stream_server = new StreamServer;\n\n  self.stream_server.register(function (socket) {\n    // socket implements the SockJSConnection interface\n    socket._meteorSession = null;\n\n    var sendError = function (reason, offendingMessage) {\n      var msg = {msg: 'error', reason: reason};\n      if (offendingMessage)\n        msg.offendingMessage = offendingMessage;\n      socket.send(DDPCommon.stringifyDDP(msg));\n    };\n\n    socket.on('data', function (raw_msg) {\n      if (Meteor._printReceivedDDP) {\n        Meteor._debug(\"Received DDP\", raw_msg);\n      }\n      try {\n        try {\n          var msg = DDPCommon.parseDDP(raw_msg);\n        } catch (err) {\n          sendError('Parse error');\n          return;\n        }\n        if (msg === null || !msg.msg) {\n          sendError('Bad request', msg);\n          return;\n        }\n\n        if (msg.msg === 'connect') {\n          if (socket._meteorSession) {\n            sendError(\"Already connected\", msg);\n            return;\n          }\n          Fiber(function () {\n            self._handleConnect(socket, msg);\n          }).run();\n          return;\n        }\n\n        if (!socket._meteorSession) {\n          sendError('Must connect first', msg);\n          return;\n        }\n        socket._meteorSession.processMessage(msg);\n      } catch (e) {\n        // XXX print stack nicely\n        Meteor._debug(\"Internal exception while processing message\", msg,\n                      e.message, e.stack);\n      }\n    });\n\n    socket.on('close', function () {\n      if (socket._meteorSession) {\n        Fiber(function () {\n          socket._meteorSession.close();\n        }).run();\n      }\n    });\n  });\n};\n\n_.extend(Server.prototype, {\n\n  /**\n   * @summary Register a callback to be called when a new DDP connection is made to the server.\n   * @locus Server\n   * @param {function} callback The function to call when a new DDP connection is established.\n   * @memberOf Meteor\n   */\n  onConnection: function (fn) {\n    var self = this;\n    return self.onConnectionHook.register(fn);\n  },\n\n  _handleConnect: function (socket, msg) {\n    var self = this;\n\n    // The connect message must specify a version and an array of supported\n    // versions, and it must claim to support what it is proposing.\n    if (!(typeof (msg.version) === 'string' &&\n          _.isArray(msg.support) &&\n          _.all(msg.support, _.isString) &&\n          _.contains(msg.support, msg.version))) {\n      socket.send(DDPCommon.stringifyDDP({msg: 'failed',\n                                version: DDPCommon.SUPPORTED_DDP_VERSIONS[0]}));\n      socket.close();\n      return;\n    }\n\n    // In the future, handle session resumption: something like:\n    //  socket._meteorSession = self.sessions[msg.session]\n    var version = calculateVersion(msg.support, DDPCommon.SUPPORTED_DDP_VERSIONS);\n\n    if (msg.version !== version) {\n      // The best version to use (according to the client's stated preferences)\n      // is not the one the client is trying to use. Inform them about the best\n      // version to use.\n      socket.send(DDPCommon.stringifyDDP({msg: 'failed', version: version}));\n      socket.close();\n      return;\n    }\n\n    // Yay, version matches! Create a new session.\n    // Note: Troposphere depends on the ability to mutate\n    // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.\n    socket._meteorSession = new Session(self, version, socket, self.options);\n    self.sessions[socket._meteorSession.id] = socket._meteorSession;\n    self.onConnectionHook.each(function (callback) {\n      if (socket._meteorSession)\n        callback(socket._meteorSession.connectionHandle);\n      return true;\n    });\n  },\n  /**\n   * Register a publish handler function.\n   *\n   * @param name {String} identifier for query\n   * @param handler {Function} publish handler\n   * @param options {Object}\n   *\n   * Server will call handler function on each new subscription,\n   * either when receiving DDP sub message for a named subscription, or on\n   * DDP connect for a universal subscription.\n   *\n   * If name is null, this will be a subscription that is\n   * automatically established and permanently on for all connected\n   * client, instead of a subscription that can be turned on and off\n   * with subscribe().\n   *\n   * options to contain:\n   *  - (mostly internal) is_auto: true if generated automatically\n   *    from an autopublish hook. this is for cosmetic purposes only\n   *    (it lets us determine whether to print a warning suggesting\n   *    that you turn off autopublish.)\n   */\n\n  /**\n   * @summary Publish a record set.\n   * @memberOf Meteor\n   * @locus Server\n   * @param {String} name Name of the record set.  If `null`, the set has no name, and the record set is automatically sent to all connected clients.\n   * @param {Function} func Function called on the server each time a client subscribes.  Inside the function, `this` is the publish handler object, described below.  If the client passed arguments to `subscribe`, the function is called with the same arguments.\n   */\n  publish: function (name, handler, options) {\n    var self = this;\n\n    options = options || {};\n\n    if (name && name in self.publish_handlers) {\n      Meteor._debug(\"Ignoring duplicate publish named '\" + name + \"'\");\n      return;\n    }\n\n    if (Package.autopublish && !options.is_auto) {\n      // They have autopublish on, yet they're trying to manually\n      // picking stuff to publish. They probably should turn off\n      // autopublish. (This check isn't perfect -- if you create a\n      // publish before you turn on autopublish, it won't catch\n      // it. But this will definitely handle the simple case where\n      // you've added the autopublish package to your app, and are\n      // calling publish from your app code.)\n      if (!self.warned_about_autopublish) {\n        self.warned_about_autopublish = true;\n        Meteor._debug(\n\"** You've set up some data subscriptions with Meteor.publish(), but\\n\" +\n\"** you still have autopublish turned on. Because autopublish is still\\n\" +\n\"** on, your Meteor.publish() calls won't have much effect. All data\\n\" +\n\"** will still be sent to all clients.\\n\" +\n\"**\\n\" +\n\"** Turn off autopublish by removing the autopublish package:\\n\" +\n\"**\\n\" +\n\"**   $ meteor remove autopublish\\n\" +\n\"**\\n\" +\n\"** .. and make sure you have Meteor.publish() and Meteor.subscribe() calls\\n\" +\n\"** for each collection that you want clients to see.\\n\");\n      }\n    }\n\n    if (name)\n      self.publish_handlers[name] = handler;\n    else {\n      self.universal_publish_handlers.push(handler);\n      // Spin up the new publisher on any existing session too. Run each\n      // session's subscription in a new Fiber, so that there's no change for\n      // self.sessions to change while we're running this loop.\n      _.each(self.sessions, function (session) {\n        if (!session._dontStartNewUniversalSubs) {\n          Fiber(function() {\n            session._startSubscription(handler);\n          }).run();\n        }\n      });\n    }\n  },\n\n  _removeSession: function (session) {\n    var self = this;\n    if (self.sessions[session.id]) {\n      delete self.sessions[session.id];\n    }\n  },\n\n  /**\n   * @summary Defines functions that can be invoked over the network by clients.\n   * @locus Anywhere\n   * @param {Object} methods Dictionary whose keys are method names and values are functions.\n   * @memberOf Meteor\n   */\n  methods: function (methods) {\n    var self = this;\n    _.each(methods, function (func, name) {\n      if (typeof func !== 'function')\n        throw new Error(\"Method '\" + name + \"' must be a function\");\n      if (self.method_handlers[name])\n        throw new Error(\"A method named '\" + name + \"' is already defined\");\n      self.method_handlers[name] = func;\n    });\n  },\n\n  call: function (name /*, arguments */) {\n    // if it's a function, the last argument is the result callback,\n    // not a parameter to the remote method.\n    var args = Array.prototype.slice.call(arguments, 1);\n    if (args.length && typeof args[args.length - 1] === \"function\")\n      var callback = args.pop();\n    return this.apply(name, args, callback);\n  },\n\n  // @param options {Optional Object}\n  // @param callback {Optional Function}\n  apply: function (name, args, options, callback) {\n    var self = this;\n\n    // We were passed 3 arguments. They may be either (name, args, options)\n    // or (name, args, callback)\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    options = options || {};\n\n    if (callback)\n      // It's not really necessary to do this, since we immediately\n      // run the callback in this fiber before returning, but we do it\n      // anyway for regularity.\n      // XXX improve error message (and how we report it)\n      callback = Meteor.bindEnvironment(\n        callback,\n        \"delivering result of invoking '\" + name + \"'\"\n      );\n\n    // Run the handler\n    var handler = self.method_handlers[name];\n    var exception;\n    if (!handler) {\n      exception = new Meteor.Error(404, \"Method not found\");\n    } else {\n      // If this is a method call from within another method, get the\n      // user state from the outer method, otherwise don't allow\n      // setUserId to be called\n      var userId = null;\n      var setUserId = function() {\n        throw new Error(\"Can't call setUserId on a server initiated method call\");\n      };\n      var connection = null;\n      var currentInvocation = DDP._CurrentInvocation.get();\n      if (currentInvocation) {\n        userId = currentInvocation.userId;\n        setUserId = function(userId) {\n          currentInvocation.setUserId(userId);\n        };\n        connection = currentInvocation.connection;\n      }\n\n      var invocation = new DDPCommon.MethodInvocation({\n        isSimulation: false,\n        userId: userId,\n        setUserId: setUserId,\n        connection: connection,\n        randomSeed: DDPCommon.makeRpcSeed(currentInvocation, name)\n      });\n      try {\n        var result = DDP._CurrentInvocation.withValue(invocation, function () {\n          return maybeAuditArgumentChecks(\n            handler, invocation, EJSON.clone(args), \"internal call to '\" +\n              name + \"'\");\n        });\n        result = EJSON.clone(result);\n      } catch (e) {\n        exception = e;\n      }\n    }\n\n    // Return the result in whichever way the caller asked for it. Note that we\n    // do NOT block on the write fence in an analogous way to how the client\n    // blocks on the relevant data being visible, so you are NOT guaranteed that\n    // cursor observe callbacks have fired when your callback is invoked. (We\n    // can change this if there's a real use case.)\n    if (callback) {\n      callback(exception, result);\n      return undefined;\n    }\n    if (exception)\n      throw exception;\n    return result;\n  },\n\n  _urlForSession: function (sessionId) {\n    var self = this;\n    var session = self.sessions[sessionId];\n    if (session)\n      return session._socketUrl;\n    else\n      return null;\n  }\n});\n\nvar calculateVersion = function (clientSupportedVersions,\n                                 serverSupportedVersions) {\n  var correctVersion = _.find(clientSupportedVersions, function (version) {\n    return _.contains(serverSupportedVersions, version);\n  });\n  if (!correctVersion) {\n    correctVersion = serverSupportedVersions[0];\n  }\n  return correctVersion;\n};\n\nDDPServer._calculateVersion = calculateVersion;\n\n\n// \"blind\" exceptions other than those that were deliberately thrown to signal\n// errors to the client\nvar wrapInternalException = function (exception, context) {\n  if (!exception || exception instanceof Meteor.Error)\n    return exception;\n\n  // tests can set the 'expected' flag on an exception so it won't go to the\n  // server log\n  if (!exception.expected) {\n    Meteor._debug(\"Exception \" + context, exception.stack);\n    if (exception.sanitizedError) {\n      Meteor._debug(\"Sanitized and reported to the client as:\", exception.sanitizedError.message);\n      Meteor._debug();\n    }\n  }\n\n  // Did the error contain more details that could have been useful if caught in\n  // server code (or if thrown from non-client-originated code), but also\n  // provided a \"sanitized\" version with more context than 500 Internal server\n  // error? Use that.\n  if (exception.sanitizedError) {\n    if (exception.sanitizedError instanceof Meteor.Error)\n      return exception.sanitizedError;\n    Meteor._debug(\"Exception \" + context + \" provides a sanitizedError that \" +\n                  \"is not a Meteor.Error; ignoring\");\n  }\n\n  return new Meteor.Error(500, \"Internal server error\");\n};\n\n\n// Audit argument checks, if the audit-argument-checks package exists (it is a\n// weak dependency of this package).\nvar maybeAuditArgumentChecks = function (f, context, args, description) {\n  args = args || [];\n  if (Package['audit-argument-checks']) {\n    return Match._failIfArgumentsAreNotAllChecked(\n      f, context, args, description);\n  }\n  return f.apply(context, args);\n};\n"]},"hash":"130effa445f638f321da499fc3f4dee75d5213ed"}

{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"/*  IsArt - Ethereum contract that is or isn't art.\n    Copyright (C) 2015  Rhea Myers <rob@Rhea Myers.org>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nif (Meteor.isClient) {\n\n  Session.setDefault('status', web3.toAscii(IsArt.is_art()));\n\n  Template.is_art.helpers({\n    status: function () {\n      return Session.get('status');\n    }\n  });\n\n  // Keep track of when we're updating the contract state on the blockchain\n  // and don't show the update dialog during that time so the user doesn't\n  // waste gas trying to change it again.\n  var updating = false;\n\n  Template.is_art.events({\n    'click': function () {\n      if (!updating) {\n        EthElements.Modal.question({\n          text: \"Toggle the contract's state (costs gas!)\",\n          ok: function () {\n            updating = true;\n            // Update the state on the blockchain\n            IsArt.toggle();\n          },\n          cancel: true\n        });\n      }\n    }\n  });\n\n  var event = IsArt.Status();\n  event.watch(function (error, result) {\n    if (!error) {\n      // Store the new status in local storage, updating the UI as a result\n      Session.set('status', web3.toAscii(result.args.is_art));\n      // The blockchain updated, so re-enable toggling.\n      // (This may unlock when *someone else's* update comes through. We could\n      //  tackle this by sending account and nonce then watching for it in the\n      //  event, but not enough people will hit the button to make that\n      //  worthwhile.)\n      updating = false;\n    }\n  });\n}\n\nif (Meteor.isServer) {\n  Meteor.startup(function () {\n    // code to run on server at startup\n  });\n}","ast":null,"map":{"version":3,"sources":["/javascripts/app.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAiBA,IAAI,MAAM,CAAC,QAAQ,EAAE;;AAEnB,SAAO,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;;AAE3D,UAAQ,CAAC,MAAM,CAAC,OAAO,CAAC;AACtB,UAAM,EAAE,YAAY;AAClB,aAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;KAC9B;GACF,CAAC,CAAC;;;;;AAKH,MAAI,QAAQ,GAAG,KAAK,CAAC;;AAErB,UAAQ,CAAC,MAAM,CAAC,MAAM,CAAC;AACrB,WAAO,EAAE,YAAU;AACjB,UAAI,CAAE,QAAQ,EAAE;AACd,mBAAW,CAAC,KAAK,CAAC,QAAQ,CAAC;AACzB,cAAI,EAAE,0CAA0C;AAChD,YAAE,EAAE,YAAU;AACZ,oBAAQ,GAAG,IAAI,CAAC;;AAEhB,iBAAK,CAAC,MAAM,EAAE,CAAC;WAChB;AACD,gBAAM,EAAE,IAAI;SACb,CAAC,CAAC;OACJ;KACF;GACF,CAAC,CAAC;;AAEH,MAAI,KAAK,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC;AAC3B,OAAK,CAAC,KAAK,CAAC,UAAS,KAAK,EAAE,MAAM,EAAC;AACjC,QAAI,CAAE,KAAK,EAAE;;AAEX,aAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;;;;;;AAMxD,cAAQ,GAAG,KAAK,CAAC;KAClB;GACF,CAAC,CAAC;CAEJ;;AAED,IAAI,MAAM,CAAC,QAAQ,EAAE;AACnB,QAAM,CAAC,OAAO,CAAC,YAAY;;GAE1B,CAAC,CAAC;CACJ","file":"/javascripts/app.js.map","sourcesContent":["/*  IsArt - Ethereum contract that is or isn't art.\n    Copyright (C) 2015  Rhea Myers <rob@Rhea Myers.org>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nif (Meteor.isClient) {\n\n  Session.setDefault('status', web3.toAscii(IsArt.is_art()));\n\n  Template.is_art.helpers({\n    status: function () {\n      return Session.get('status');\n    }\n  });\n\n  // Keep track of when we're updating the contract state on the blockchain\n  // and don't show the update dialog during that time so the user doesn't\n  // waste gas trying to change it again.\n  var updating = false;\n\n  Template.is_art.events({\n    'click': function(){\n      if (! updating) {\n        EthElements.Modal.question({\n          text: \"Toggle the contract's state (costs gas!)\",\n          ok: function(){\n            updating = true;\n            // Update the state on the blockchain\n            IsArt.toggle();\n          },\n          cancel: true\n        });\n      }\n    }\n  });\n\n  var event = IsArt.Status();\n  event.watch(function(error, result){\n    if (! error) {\n      // Store the new status in local storage, updating the UI as a result\n      Session.set('status', web3.toAscii(result.args.is_art));\n      // The blockchain updated, so re-enable toggling.\n      // (This may unlock when *someone else's* update comes through. We could\n      //  tackle this by sending account and nonce then watching for it in the\n      //  event, but not enough people will hit the button to make that\n      //  worthwhile.)\n      updating = false;\n    }\n  });\n\n}\n\nif (Meteor.isServer) {\n  Meteor.startup(function () {\n    // code to run on server at startup\n  });\n}\n"]},"hash":"97481f5f7a756784edf0e19ae0d89bbab25ca636"}
